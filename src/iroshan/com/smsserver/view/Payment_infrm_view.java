/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iroshan.com.smsserver.view;

import iroshan.com.common.utility.MyMessagesUtility;
import iroshan.com.smsserver.enums.MessageStatusEnum;
import iroshan.Company_Profile;
import iroshan.com.smsserver.pojo.PaymentSMS_pojo;
import iroshan.com.smsserver.service.Payment_service;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Iroshan
 */
public class Payment_infrm_view extends javax.swing.JInternalFrame
{

    static Payment_infrm_view payment_infrm_view = null;
    public static List<PaymentSMS_pojo> paymentList;

    /**
     * Creates new form ArrearsJIFrame_view
     */
    public Payment_infrm_view ()
    {
        initComponents ();
        payment_infrm_view = this;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings ("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPending = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSent = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblUnsent = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("New Payments");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iroshan/com/smsserver/view/Messaging.png"))); // NOI18N

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Branch Code: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblPending.setAutoCreateRowSorter(true);
        tblPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "VOUCHER NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPending.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPending.setFillsViewportHeight(true);
        tblPending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPendingMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblPending);
        if (tblPending.getColumnModel().getColumnCount() > 0) {
            tblPending.getColumnModel().getColumn(5).setPreferredWidth(160);
            tblPending.getColumnModel().getColumn(6).setPreferredWidth(400);
        }

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("SEND");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Select All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Unselect All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("MARK AS SEND");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton8.setText("STOP SENDING");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton9.setText("CLOSE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("PENDING", jPanel2);

        tblSent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "VOUCHER NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSent.setFillsViewportHeight(true);
        jScrollPane2.setViewportView(tblSent);
        if (tblSent.getColumnModel().getColumnCount() > 0) {
            tblSent.getColumnModel().getColumn(2).setResizable(false);
            tblSent.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("SENT", jPanel4);

        tblUnsent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "VOUCHER NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUnsent.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(tblUnsent);

        jButton7.setText("RE-SEND");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap())
        );

        jTabbedPane1.addTab("UNSENT", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadNewPayment ();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        sendSms ();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void tblPendingMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPendingMouseReleased
    {//GEN-HEADEREND:event_tblPendingMouseReleased
//        tblSelectProsesing ();
    }//GEN-LAST:event_tblPendingMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        selectAllProcessing ();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        unselectAllProcessing ();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        markAsSend ();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton7ActionPerformed
    {//GEN-HEADEREND:event_jButton7ActionPerformed
        reSendSms ();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed
    {//GEN-HEADEREND:event_jButton8ActionPerformed
        stopSending ();
    }//GEN-LAST:event_jButton8ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tblPending;
    private javax.swing.JTable tblSent;
    private javax.swing.JTable tblUnsent;
    // End of variables declaration//GEN-END:variables










    public static Payment_infrm_view getPayment_infrm_view ()
    {
        return payment_infrm_view;
    }

    public static void setPayment_infrm_view (Payment_infrm_view payment_infrm_view)
    {
        Payment_infrm_view.payment_infrm_view = payment_infrm_view;
    }

    public static List<PaymentSMS_pojo> getPaymentList ()
    {
        return paymentList;
    }

    public static void setPaymentList (List<PaymentSMS_pojo> paymentList)
    {
        Payment_infrm_view.paymentList = paymentList;
    }







    private void loadNewPayment ()
    {
        new Thread (new Runnable ()
        {
            @Override
            public void run ()
            {
                String brCode = jTextField1.getText();
                paymentList = new Payment_service ().getNewPaymentsList (brCode);
                loadPaymentToTables ();
            }
        }).start ();
    }







    public void loadPaymentToTables (String recipientPara, String textPara, String messageStatusStringPara)
    {

        String recipient = recipientPara;
        String text = textPara;
        String messageStatusString = messageStatusStringPara;


// List<ReceiptSMS_pojo> receiptList;
        List<PaymentSMS_pojo> outstandingMap = paymentList;
        if (outstandingMap != null)
        {

            for (int i = 0 ; i < outstandingMap.size () ; i++)
            {
                PaymentSMS_pojo loanPojo = outstandingMap.get (i);

//            }
//            for (Loan_pojo outstandingMapObj : outstandingMap)
//            {

//                Integer key = entrySet.getKey ();
//                Loan_pojo loanPojo = outstandingMapObj;

                String telList = loanPojo.getTelNo ().trim ();
                String msgList = loanPojo.getMessage ().trim ();


//                System.out.println ("text>>" + text + " / telList>>" + msgList);

                if (recipient.equalsIgnoreCase (telList) && text.equalsIgnoreCase (msgList))
                {
                    outstandingMap.remove (i);
                    loanPojo.setMsgStatus (messageStatusString);
                    outstandingMap.add (loanPojo);
//                    new SendMessageSaveDao ().saveToDB (MyMessageTypeEnum.OUTSTANDING.toString (), -1, telList, msgList, om.getDate ());
                }

            }


        }


        loadPaymentToTables ();


    }



    public void loadPaymentToTables ()
    {


//        PENDING
        DefaultTableModel dfTblMdPending = (DefaultTableModel) tblPending.getModel ();
        int rowCountPending = dfTblMdPending.getRowCount ();

        for (int i = 0 ; i < rowCountPending ; i++)
        {
            dfTblMdPending.removeRow (0);
        }

//        SENT
        DefaultTableModel dfTblMdSent = (DefaultTableModel) tblSent.getModel ();
        int rowCountSent = dfTblMdSent.getRowCount ();

        for (int i = 0 ; i < rowCountSent ; i++)
        {
            dfTblMdSent.removeRow (0);
        }

//        UNSENT
        DefaultTableModel dfTblMdUnsent = (DefaultTableModel) tblUnsent.getModel ();
        int rowCountUnsent = dfTblMdUnsent.getRowCount ();

        for (int i = 0 ; i < rowCountUnsent ; i++)
        {
            dfTblMdUnsent.removeRow (0);
        }


        for (PaymentSMS_pojo paymentListObj : paymentList)
        {

            String status = paymentListObj.getMsgStatus ();
            System.out.println ("status>" + status);
            if (status.equalsIgnoreCase (MessageStatusEnum.PENDING.toString ()))
            {
                dfTblMdPending.addRow (new Object[]
                {
                    paymentListObj.getIsSelected (), paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.SENT.toString ()))
            {
                dfTblMdSent.addRow (new Object[]
                {
                    paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()))
            {
                dfTblMdUnsent.addRow (new Object[]
                {
                    paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ()))
            {
                dfTblMdUnsent.addRow (new Object[]
                {
                    paymentListObj.getIsSelected (), paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
                });
            }



        }

        tblPending.revalidate ();
    }





    private void sendSms ()
    {
        new Thread (new Runnable ()
        {
            @Override
            public void run ()
            {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
                {
//                    ---------------------------------------------
                    Company_Profile.setMsgSendStart (true);
//                    ---------------------------------------------

                    List<PaymentSMS_pojo> paymentList2 = new ArrayList<PaymentSMS_pojo> ();

                    DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
                    int rowCount = dfTblMd.getRowCount ();
                    for (int i = 0 ; i < rowCount ; i++)
                    {
                        Boolean isSelected2 = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ());

                        String phoneNo = dfTblMd.getValueAt (i, 5).toString ();
                        String message = dfTblMd.getValueAt (i, 6).toString ();

                        PaymentSMS_pojo loanPojo = new PaymentSMS_pojo ();
                        loanPojo.setIsSelected (isSelected2);
                        loanPojo.setTelNo (phoneNo);
                        loanPojo.setMessage (message);

                        paymentList2.add (loanPojo);
                    }

                    if (paymentList2.size () > 0)
                    {
//            new Loan_service ().sendDueSms (loanArearsMap2);
                        new Payment_service ().sendPaymentSms (paymentList2);
                    }
                }

            }
        }).start ();

    }





    private void reSendSms ()
    {
        new Thread (new Runnable ()
        {
            @Override
            public void run ()
            {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
                {

//                    --------------------------------------
                    Company_Profile.setMsgSendStart (true);
//                    --------------------------------------
                    List<PaymentSMS_pojo> paymentList2 = new ArrayList<PaymentSMS_pojo> ();

                    DefaultTableModel dfTblMd = (DefaultTableModel) tblUnsent.getModel ();
                    int rowCount = dfTblMd.getRowCount ();
                    for (int i = 0 ; i < rowCount ; i++)
                    {
                        String msgStatus = dfTblMd.getValueAt (i, 7).toString ().trim ();
                        Boolean isSelect = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ().trim ());
                        if (isSelect && (msgStatus.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()) || msgStatus.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ())))
                        {
                            String phoneNo = dfTblMd.getValueAt (i, 5).toString ();
                            String message = dfTblMd.getValueAt (i, 6).toString ();

                            PaymentSMS_pojo loanPojo = new PaymentSMS_pojo ();
                            loanPojo.setIsSelected (isSelect);
                            loanPojo.setTelNo (phoneNo);
                            loanPojo.setMessage (message);

                            paymentList2.add (loanPojo);
                        }

                    }

                    if (paymentList2.size () > 0)
                    {
//            new Loan_service ().sendDueSms (loanArearsMap2);
                        new Payment_service ().reSendPaymentSms (paymentList2);
                    }
                }

            }
        }).start ();
    }




    private void tblSelectProsesing ()
    {

        int rowNo = tblPending.getSelectedRow ();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
        Boolean isSelected = Boolean.valueOf (dfTblMd.getValueAt (rowNo, 0).toString ().trim ());
        String cusCode = dfTblMd.getValueAt (rowNo, 1).toString ().trim ();
        String tel = dfTblMd.getValueAt (rowNo, 2).toString ().trim ();
        String msg = dfTblMd.getValueAt (rowNo, 3).toString ().trim ();


        List<PaymentSMS_pojo> loanArearsMap = getPaymentList ();
        for (int i = 0 ; i < loanArearsMap.size () ; i++)
        {
            PaymentSMS_pojo loanPojo = loanArearsMap.get (i);



            String listCusCode = loanPojo.getCusCode ().trim ();
            String listTel = loanPojo.getTelNo ().trim ();
            String listMsg = loanPojo.getMessage ().trim ();

            if (listCusCode.equalsIgnoreCase (cusCode) && listTel.equalsIgnoreCase (tel) && listMsg.equalsIgnoreCase (msg))
            {
                loanArearsMap.remove (loanPojo);
            }
            loanPojo.setIsSelected (isSelected);
            loanArearsMap.add (loanPojo);

        }
    }

    private void selectAllProcessing ()
    {
        List<PaymentSMS_pojo> loanArearsMap = getPaymentList ();

        int size = loanArearsMap.size ();

        for (int i = 0 ; i < size ; i++)
        {
            PaymentSMS_pojo loanPojo = loanArearsMap.get (i);

            loanArearsMap.remove (loanPojo);

            loanPojo.setIsSelected (true);
            loanArearsMap.add (i, loanPojo);

        }

        loadPaymentToTables ();
    }

    private void unselectAllProcessing ()
    {
        List<PaymentSMS_pojo> loanArearsMap = getPaymentList ();
        int size = loanArearsMap.size ();
        for (int i = 0 ; i < size ; i++)
        {
            PaymentSMS_pojo loanPojo = loanArearsMap.get (i);

            loanArearsMap.remove (loanPojo);

            loanPojo.setIsSelected (false);
            loanArearsMap.add (i, loanPojo);

        }

        loadPaymentToTables ();
    }






    private void markAsSend ()
    {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
        {

            List<String> list = new ArrayList<String> ();

            DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
            int rowCount = dfTblMd.getRowCount ();
            for (int i = 0 ; i < rowCount ; i++)
            {
                Boolean isSelected2 = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ());

                if (isSelected2)
                {
                    String paymentNo = dfTblMd.getValueAt (i, 1).toString ();
                    list.add (paymentNo);
                }
            }


            if (list.size () > 0)
            {
                new Payment_service ().markAsSend (list);
                loadNewPayment ();
            } else
            {
                MyMessagesUtility.showWarning ("Mark at least one record.");
            }

//            new Jurnal_service ().alterFT_DTAIL ();
        }
    }

    private void stopSending ()
    {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?.") == 0)
        {
            Company_Profile.setMsgSendStart (false);
        }
    }


}

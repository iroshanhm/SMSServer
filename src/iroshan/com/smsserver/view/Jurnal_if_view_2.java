/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iroshan.com.smsserver.view;

import iroshan.com.common.utility.MyMessagesUtility;
import iroshan.com.smsserver.enums.MessageStatusEnum;
import iroshan.Company_Profile;
import iroshan.com.smsserver.enums.MyMessageTypeEnum;
import iroshan.com.smsserver.pojo.NewJurnal_pojo;
import iroshan.com.smsserver.service.Loan_service;
import iroshan.com.smsserver.service.Jurnal_service;
import iroshan.com.smsserver.service.MySMSServer;
import iroshan.com.smsserver.service.Payment_service;
import iroshan.com.smsserver.service.SMSCount_Service;
import iroshan.com.smsserver.service.SendMessage;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.smslib.OutboundMessage;

/**
 *
 * @author Iroshan
 */
public class Jurnal_if_view_2 extends javax.swing.JInternalFrame {

    ShowMessageDetails_INF showMessageDetails_INF = new ShowMessageDetails_INF();

    SendMessage sendMessage = null;
    public static Jurnal_if_view_2 jurnal_if_view = null;
//    static List<ReceiptSMS_pojo> receiptList;
    static Map<Integer, NewJurnal_pojo> tableMap;

    Jurnal_service jurnalService = null;

    Thread trdSend = null;
    int currentRow = 0;
    int findCurrentRow = 0;
    int preveiesEvent = -1; // 1= down 2=up

    //  WAITING DIALOG - START ***************************************
    WaitingDialogSMSSend waitingDialogSMSSend;
    Thread trdWaiting;
    // WAITING DIALOG - END ******************************************

    /**
     * Creates new form ArrearsJIFrame_view
     */
    public Jurnal_if_view_2() {
        initComponents();
        jurnal_if_view = this;
        loadCenter();
//        tblPending.setDefaultRenderer (Object.class, new CustomTableCellRenderForSendReceiptSMS ());
//        new CustomTableCellRenderForSendReceiptSMS ().setCustomCellRender (tblSendSMS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbCenter = new javax.swing.JComboBox();
        rbutLoan = new javax.swing.JRadioButton();
        rbutSaving = new javax.swing.JRadioButton();
        rbutOther = new javax.swing.JRadioButton();
        rbutAll = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        cmbSortOrder = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        tf_Branch_Code = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        butSend = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPending = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmbFindingOption = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        panel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        panel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbUpDown = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("New Jurnal 2");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iroshan/com/smsserver/view/Messaging.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Center :");

        cmbCenter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));

        buttonGroup1.add(rbutLoan);
        rbutLoan.setText("Loan");

        buttonGroup1.add(rbutSaving);
        rbutSaving.setText("Saving");

        buttonGroup1.add(rbutOther);
        rbutOther.setText("Other");

        buttonGroup1.add(rbutAll);
        rbutAll.setSelected(true);
        rbutAll.setText("All");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        cmbSortOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DEFAULT", "JURNAL NO", "CUS. CODE", "CUS. NAME", "ACCOUNT SUB OFFICE NO", "TELE. NO" }));

        jLabel2.setText("Sort by :");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel4.setText("Branch Code :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_Branch_Code)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbutAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbutLoan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbutSaving)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbutOther)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSortOrder, 0, 105, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cmbCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rbutLoan)
                        .addComponent(rbutSaving)
                        .addComponent(rbutOther)
                        .addComponent(rbutAll)
                        .addComponent(cmbSortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jSeparator2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tf_Branch_Code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        butSend.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        butSend.setText("SEND");
        butSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSendActionPerformed(evt);
            }
        });

        tblPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "JURNAL NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPending.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPending.setFillsViewportHeight(true);
        tblPending.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPending.getTableHeader().setReorderingAllowed(false);
        tblPending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPendingMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblPending);
        if (tblPending.getColumnModel().getColumnCount() > 0) {
            tblPending.getColumnModel().getColumn(6).setPreferredWidth(100);
            tblPending.getColumnModel().getColumn(7).setMinWidth(250);
        }

        jButton4.setText("Select All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Unselect All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("MARK AS SEND");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton9.setText("CLOSE");

        jButton3.setText("Show Message");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(butSend, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butSend, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        jLabel3.setText("Column :");

        cmbFindingOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "#", "JURNAL NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS" }));
        cmbFindingOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFindingOptionActionPerformed(evt);
            }
        });

        jButton2.setText("Find");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Finding Value :");

        buttonGroup2.add(jCheckBox1);
        jCheckBox1.setText("Select");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jCheckBox2);
        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Un-Select");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox2)
                .addGap(0, 86, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5)
                .addComponent(jCheckBox1)
                .addComponent(jCheckBox2))
        );

        jLayeredPane1.add(panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, -1));

        jLabel6.setText("Finding Value :");

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6))
        );

        panel2.setVisible (false);

        jLayeredPane1.add(panel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, -1));

        cmbUpDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Down", "Up" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addComponent(cmbFindingOption, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbUpDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(cmbUpDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFindingOption, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        search();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void butSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSendActionPerformed

        sendSms_2();

    }//GEN-LAST:event_butSendActionPerformed

    private void tblPendingMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPendingMouseReleased
    {//GEN-HEADEREND:event_tblPendingMouseReleased

        tblSelectProsesing();

    }//GEN-LAST:event_tblPendingMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        selectAllProcessing();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        unselectAllProcessing();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        markAsSend();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void cmbFindingOptionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbFindingOptionActionPerformed
    {//GEN-HEADEREND:event_cmbFindingOptionActionPerformed
        findingOption();
    }//GEN-LAST:event_cmbFindingOptionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        findInTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox1ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        showMessageInf();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        closeMessageInf();
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butSend;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cmbCenter;
    private javax.swing.JComboBox<String> cmbFindingOption;
    private javax.swing.JComboBox cmbSortOrder;
    private javax.swing.JComboBox<String> cmbUpDown;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JRadioButton rbutAll;
    private javax.swing.JRadioButton rbutLoan;
    private javax.swing.JRadioButton rbutOther;
    private javax.swing.JRadioButton rbutSaving;
    private static javax.swing.JTable tblPending;
    private javax.swing.JTextField tf_Branch_Code;
    // End of variables declaration//GEN-END:variables

    public static Jurnal_if_view_2 getJurnal_if_view() {
        return jurnal_if_view;
    }

    public static void setJurnal_if_view(Jurnal_if_view_2 jurnal_if_view) {
        Jurnal_if_view_2.jurnal_if_view = jurnal_if_view;
    }

    void search() {
        new Thread(new Runnable() {

            @Override
            public void run() {

                boolean aFlag = true;

                String center_str = null;
                String type_str = "ALL";
                String sortOrder = "DEFAULT";

                String sortOrder2 = cmbSortOrder.getSelectedItem().toString().trim();
                sortOrder = sortOrder2.trim();

                if (cmbCenter.getSelectedIndex() == 0) {
                    aFlag = false;
                } else if (cmbCenter.getSelectedIndex() > 0) {
                    String center = cmbCenter.getSelectedItem().toString().trim();
                    if (center.equalsIgnoreCase("ALL")) {
                        center_str = center;
                    } else {
                        String[] centerArr = center.split("-");
                        center_str = centerArr[0].trim();
                    }
                }

                if (rbutAll.isSelected()) {
                    type_str = "ALL";
                } else if (rbutLoan.isSelected()) {
                    type_str = "LOAN";
                } else if (rbutSaving.isSelected()) {
                    type_str = "SAVING";
                } else if (rbutOther.isSelected()) {
                    type_str = "OTHER";
                }

                if (aFlag) {
//                receiptList = new Jurnal_service ().search (center_str,type_str);
//                    Map<Integer, NewJurnal_pojo> receiveMap = new Jurnal_service ().search (center_str, type_str);
                    System.out.println("Here 01..........................................");

                    String br_Code = tf_Branch_Code.getText();
                    tableMap = new Jurnal_service().search(br_Code, center_str, type_str, sortOrder);

                    loadTables();
//                    loadReceiptToTables ();
                }
            }
        }).start();

    }

//    public void loadTables (String recipientPara, String textPara, String messageStatusStringPara)
//    {
//
//        String recipient = recipientPara.trim ();
//        recipient = MyPhoneNoFormatingUtility.formatTo9Number (recipient);
//
//        String text = textPara.trim ();
//        String messageStatusString = messageStatusStringPara.trim ();
//
//
//
//        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
//        int rowCount = dfTblMd.getRowCount ();
//        for (int i = 0 ; i < rowCount ; i++)
//        {
////            Boolean isSelected = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ().trim ());
//            Integer keyNo = Integer.valueOf (dfTblMd.getValueAt (i, 1).toString ().trim ());
//
//            String tel = dfTblMd.getValueAt (i, 6).toString ().trim ();
//            tel = MyPhoneNoFormatingUtility.formatTo9Number (tel);
//            String msg = dfTblMd.getValueAt (i, 7).toString ().trim ();
//
//            if (recipient.equalsIgnoreCase (tel) && text.equalsIgnoreCase (msg))
//            {
//                NewJurnal_pojo newJRPojo = tableMap.get (keyNo);
//                newJRPojo.setStatus (messageStatusString);
//                tableMap.remove (keyNo);
//                tableMap.put (keyNo, newJRPojo);
//            }
//
//        }
//
//
//        loadTables ();
//
//    }
    public void loadTablesByMapKey(Integer keyPara, String messageStatusStringPara) {

        Integer key = keyPara;
        String messageStatusString = messageStatusStringPara.trim();

        NewJurnal_pojo value = tableMap.get(key);

        value.setStatus(messageStatusString);
        tableMap.remove(key);
        tableMap.put(key, value);

        loadTables();

    }

    public void loadTables() {

//        tblPending.setAutoCreateRowSorter (false);
//        tblSent.setAutoCreateRowSorter (false);
//        tblUnsent.setAutoCreateRowSorter (false);
//        PENDING
        final DefaultTableModel dfTblMdPending = (DefaultTableModel) tblPending.getModel();
        int rowCountPending = dfTblMdPending.getRowCount();

        for (int i = 0; i < rowCountPending; i++) {
            dfTblMdPending.removeRow(0);
        }
//        dfTblMdPending.setRowCount (0);

        for (Map.Entry<Integer, NewJurnal_pojo> entrySet : tableMap.entrySet()) {
            Integer keyNo = entrySet.getKey();
            NewJurnal_pojo value = entrySet.getValue();

            Boolean isSelect = value.getIsSelect();
            String JurnalNo = value.getJurnalNo();
            String memCode = value.getMemCode();
            String memName = value.getMemName();
            String acOfficeNo = value.getAcOfficeNo();
            String memTeleNo = value.getMemTeleNo();
            String message = value.getMessage();
            String status = value.getStatus().trim();

            if (status.equalsIgnoreCase(MessageStatusEnum.PENDING.toString())) {

                dfTblMdPending.addRow(new Object[]{
                    isSelect, keyNo, JurnalNo, memCode, memName, acOfficeNo, memTeleNo,
                    message, status
                });
            } else if (status.equalsIgnoreCase(MessageStatusEnum.QUEUE.toString())) {
                dfTblMdPending.addRow(new Object[]{
                    isSelect, keyNo, JurnalNo, memCode, memName, acOfficeNo, memTeleNo, message, status
                });
            }

        }

    }

    private void sendSms() {

        trdSend = new Thread(new Runnable() {
            @Override
            public void run() {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

//                    enableStopSending ();
//                    disableSendBut ();
                    if (jurnalService == null) {

//                    --------------------------------------
                        Company_Profile.setMsgSendStart(true);
//                    --------------------------------------

                        Map<Integer, NewJurnal_pojo> map = tableMap;
                        jurnalService = new Jurnal_service();
                        jurnalService.sendJurnalSMS(map);

                    } else {
                        jurnalService.sendSMS();
                    }
                }
            }
        });

        trdSend.start();
    }

    private void sendSms_2() {

        trdSend = new Thread(new Runnable() {
            @Override
            public void run() {

                String messageType = MyMessageTypeEnum.NEW_JURNAL.toString().trim();
                int sentSMSCount = 0;
                int sentConfirmSMSCount = 0;

                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

                    try {
                        //-------------------------------------------------------
                        trdWaiting = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                waitingDialogSMSSend = new WaitingDialogSMSSend("", "Starting ...", ApplicationDesktop.appDesktop, true);
                                waitingDialogSMSSend.setVisible(true);
                            }
                        });
                        trdWaiting.start();
                        //-------------------------------------------------------

                        if (jurnalService == null) {
                            jurnalService = new Jurnal_service();
                        }
                        if (sendMessage == null) {
                            sendMessage = new SendMessage();
                        }
                        // --------------------------------------------------
                        Company_Profile.setMsgSendStart(true);
                        // --------------------------------------------------

                        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
                        int rowCount = dfTblMd.getRowCount();

                        //-------------------------------------
                        MySMSServer.restartService();
                        //-------------------------------------

                        OutboundMessage.MessageStatuses confirmStart = sendMessage.sendConfirm_1(Company_Profile.getConfirmTeleNo(), messageType + " sending start.");
                        if (!confirmStart.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            MyMessagesUtility.showWarning("Jurnal sending " + confirmStart.toString());
                        } else if (confirmStart.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            ++sentConfirmSMSCount;
                        }

                        outerLoop:
                        for (int i = currentRow; i < rowCount; i++) {

                            if (!Company_Profile.getMsgSendStart()) // IF MSG SENDING STOPED
                            {
                                break outerLoop;
                            }

                            int j = i;
                            ++j;

                            try {
                                Thread.sleep(500);

                            } catch (InterruptedException ex) {
                                Logger.getLogger(Jurnal_if_view_2.class
                                        .getName()).log(Level.SEVERE, null, ex);
                            }

                            //----------------------------------------
                            String customeMessage = "On Processing : " + j + "/" + rowCount;
                            waitingDialogSMSSend.setCustomMessage(customeMessage);

                            tblPending.setRowSelectionInterval(i, i);
                            tblPending.scrollRectToVisible(new Rectangle(tblPending.getCellRect(i, 0, true)));
                            //----------------------------------------

                            Boolean isSelected = Boolean.valueOf(String.valueOf(dfTblMd.getValueAt(i, 0)));
                            if (isSelected) {
                                if (!dfTblMd.getValueAt(i, 8).toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString())) {
                                    String jCode = String.valueOf(dfTblMd.getValueAt(i, 2));
                                    String cusCode = String.valueOf(dfTblMd.getValueAt(i, 3));
                                    String phoneNo = String.valueOf(dfTblMd.getValueAt(i, 6));
                                    String message = String.valueOf(dfTblMd.getValueAt(i, 7));

                                    // SEND
                                    OutboundMessage.MessageStatuses msgStatus = jurnalService.sendSMS_2(phoneNo, message, cusCode, jCode);

                                    if (msgStatus.toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString().trim())) {
                                        ++sentSMSCount;
                                    }

                                    dfTblMd.setValueAt(msgStatus.toString(), i, 8);
                                }

                            }
                            currentRow = i;
                        }

                        waitingDialogSMSSend.dispose();
                        trdWaiting.interrupt();

                        OutboundMessage.MessageStatuses confirmEnd = sendMessage.sendConfirm_1(Company_Profile.getConfirmTeleNo(), messageType + " sending end with " + sentSMSCount + " messages.");
                        if (!confirmEnd.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            MyMessagesUtility.showWarning("Jurnal sending " + confirmEnd.toString());
                        } else if (confirmEnd.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            ++sentConfirmSMSCount;
                        }

                        new SMSCount_Service().saveSMSCount(MyMessageTypeEnum.NEW_JURNAL.name().trim(), sentSMSCount);
                        new SMSCount_Service().saveSMSCount(MyMessageTypeEnum.CONFIRM.name().trim(), sentConfirmSMSCount);

                    } catch (Exception ex) {
                        MyMessagesUtility.showError(ex.toString());
                        Logger
                                .getLogger(Jurnal_if_view_2.class
                                        .getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
        });
        trdSend.start();

    }

    private void stopSending() {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

//            enableSendBut ();
//            disableStopSending ();
            Company_Profile.setMsgSendStart(false);
            trdSend = null;
        }

    }

    private void reSendSms() {
        trdSend = new Thread(new Runnable() {

            @Override
            public void run() {

                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

                    //                    --------------------------------------
                    Company_Profile.setMsgSendStart(true);
//                    --------------------------------------

                    Map<Integer, NewJurnal_pojo> map = tableMap;
//                    Map<Integer, NewJurnal_pojo> tableMap2 = tableMap;
                    new Jurnal_service().reSendJurnalSMS(map);

                }
            }
        });
        trdSend.start();
    }

    private void tblSelectProsesing() {

        int selectedColumn = tblPending.getSelectedColumn();
        int rowNo = tblPending.getSelectedRow();

        findCurrentRow = rowNo;

        if (selectedColumn == 0) {

            DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
            Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(rowNo, 0).toString().trim());

//        Integer keyNo = dfTblMd.getValueAt (rowNo, 1).toString ().trim ();
            Integer keyNo = Integer.valueOf(dfTblMd.getValueAt(rowNo, 1).toString().trim());
            String tel = dfTblMd.getValueAt(rowNo, 2).toString().trim();
            String msg = dfTblMd.getValueAt(rowNo, 3).toString().trim();

            NewJurnal_pojo newJRPojo = tableMap.get(keyNo);

            newJRPojo.setIsSelect(isSelected);
            tableMap.remove(keyNo);
            tableMap.put(keyNo, newJRPojo);

        }

    }

    private void selectAllProcessing() {
        int rowNo = tblPending.getSelectedRow();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        int rowCount = dfTblMd.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString().trim());
            Integer keyNo = Integer.valueOf(dfTblMd.getValueAt(i, 1).toString().trim());
//            String tel = dfTblMd.getValueAt (i, 2).toString ().trim ();
//            String msg = dfTblMd.getValueAt (i, 3).toString ().trim ();

            NewJurnal_pojo newJRPojo = tableMap.get(keyNo);
            newJRPojo.setIsSelect(true);
            tableMap.remove(keyNo);
            tableMap.put(keyNo, newJRPojo);
        }

        loadTables();
    }

    private void unselectAllProcessing() {

//        int rowNo = tblPending.getSelectedRow ();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        int rowCount = dfTblMd.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString().trim());
            Integer keyNo = Integer.valueOf(dfTblMd.getValueAt(i, 1).toString().trim());
//            String tel = dfTblMd.getValueAt (i, 2).toString ().trim ();
//            String msg = dfTblMd.getValueAt (i, 3).toString ().trim ();

            NewJurnal_pojo newJRPojo = tableMap.get(keyNo);
            newJRPojo.setIsSelect(false);
            tableMap.remove(keyNo);
            tableMap.put(keyNo, newJRPojo);
        }

        loadTables();
    }

    private void markAsSend() {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

            List<String> list = new ArrayList<String>();

            DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
            int rowCount = dfTblMd.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                Boolean isSelected2 = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString());

                if (isSelected2) {
                    String paymentNo = dfTblMd.getValueAt(i, 2).toString();
                    list.add(paymentNo);
                }
            }

            if (list.size() > 0) {
                new Jurnal_service().markAsSend(list);
                search();
            } else {
                MyMessagesUtility.showWarning("Mark at least one record.");
            }
        }
    }

//    private void changeStatusToQueue (String teleNoPara, String MessagePara)
//    {
//
//
//        String recipient = teleNoPara;
//        String msgText = MessagePara;
//
//        List<ReceiptSMS_pojo> receiptList = receiptList;
//        if (receiptList != null)
//        {
//            for (int i = 0 ; i < receiptList.size () ; i++)
//            {
//                ReceiptSMS_pojo listObj = receiptList.get (i);
//
//                String telList = listObj.getTelNo ().trim ();
//                String msgList = listObj.getMessage ().trim ();
//
//                if (recipient.equalsIgnoreCase (telList) && msgText.equalsIgnoreCase (msgList))
//                {
//                    receiptList.remove (i);
//                    listObj.setMsgStatus ("QUEUE");
//                    receiptList.add (i, listObj);
//
//                }
//            }
//        }
//
//        loadReceiptToTables ();
//    }
    private void loadCenter() {
        cmbCenter.removeAllItems();
        cmbCenter.addItem("Select");
        cmbCenter.addItem("ALL");

        List<String> list = new Loan_service().loadCenter();
        for (String listObj : list) {
            cmbCenter.addItem(listObj);
        }
    }

    public void sortTblPending() {

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblPending.getModel());
        tblPending.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();

        int columnIndexToSort = 3;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));

        sorter.setSortKeys(sortKeys);
        sorter.sort();

    }

    private void enableSendBut() {
        butSend.setEnabled(true);
    }

    private void disableSendBut() {
        butSend.setEnabled(false);
    }

//    private void enableStopSending ()
//    {
//        butStopSending.setEnabled (true);
//    }
//
//    private void disableStopSending ()
//    {
//        butStopSending.setEnabled (false);
//    }
    private void findingOption() {
        String opt = cmbFindingOption.getSelectedItem().toString().trim();
//SELECT
//#
//JURNAL NO
//CUS. CODE
//CUS. NAME
//ACCOUNT OFFICE NO
//MESSAGE
//STATUS
        if (opt.equalsIgnoreCase("SELECT")) {
            panel2.setVisible(false);
            panel1.setVisible(true);
        } else {
            panel1.setVisible(false);
            panel2.setVisible(true);
        }

    }

    private void findInTable() {

//SELECT
//#
//JURNAL NO
//CUS. CODE
//CUS. NAME
//ACCOUNT OFFICE NO
//MESSAGE
//STATUS
        String cmbOption = cmbFindingOption.getSelectedItem().toString().trim();

        String findVal = "";

        if (cmbOption.equalsIgnoreCase("STATUS")) {
            if (jCheckBox1.isSelected()) {
                findVal = "True";
            } else if (jCheckBox2.isSelected()) {
                findVal = "False";
            }
        } else {
            findVal = jTextField1.getText().trim();
        }

        int searchColumn = -1;

        if (cmbOption.equalsIgnoreCase("SELECT")) {
            searchColumn = 0;
        }

        if (cmbOption.equalsIgnoreCase("#")) {
            searchColumn = 1;
        }

        if (cmbOption.equalsIgnoreCase("JURNAL NO")) {
            searchColumn = 2;
        }

        if (cmbOption.equalsIgnoreCase("CUS. CODE")) {
            searchColumn = 3;
        }

        if (cmbOption.equalsIgnoreCase("CUS. NAME")) {
            searchColumn = 4;
        }

        if (cmbOption.equalsIgnoreCase("ACCOUNT OFFICE NO")) {
            searchColumn = 5;
        }

        if (cmbOption.equalsIgnoreCase("TELE. NO")) {
            searchColumn = 6;
        }

        if (cmbOption.equalsIgnoreCase("MESSAGE")) {
            searchColumn = 7;
        }

        if (cmbOption.equalsIgnoreCase("STATUS")) {
            searchColumn = 8;
        }

        System.out.println("findCurrentRow>>" + findCurrentRow);

        try {
            findCurrentRow = tblPending.getSelectedRow();

        } catch (Exception e) {
        }

        String findWay = cmbUpDown.getSelectedItem().toString().trim();
        if (findWay.equalsIgnoreCase("Down")) {
            if (findCurrentRow < 0) {
                findCurrentRow = 0;
            } else {
                ++findCurrentRow;
            }
//            if (selectedRow != 0)
//            {
//                selectedRow = findCurrentRow + 2;
//            }

            preveiesEvent = 1;

            int tblRows = tblPending.getRowCount();
            breakPoint:

            for (int i = findCurrentRow; i < tblRows; i++) {

//                System.out.println ("i>>" + findWay + "-" + i);
                String valueInCell = tblPending.getValueAt(i, searchColumn).toString().trim();
                valueInCell = valueInCell.toLowerCase();

                findVal = findVal.toLowerCase();

                int intIndex = valueInCell.indexOf(findVal);
                if (intIndex == - 1) {
//                    findCurrentRow = i;
                } else {
                    tblPending.setRowSelectionInterval(i, i);
                    tblPending.scrollRectToVisible(new Rectangle(tblPending.getCellRect(i, searchColumn, true)));
//                    ++findCurrentRow;
                    break breakPoint;
                }

            }
        } else if (findWay.equalsIgnoreCase("Up")) {

//            if (preveiesEvent == 1)
//            {
//                findCurrentRow = findCurrentRow - 2;
//            }
            if (findCurrentRow < 0) {
                findCurrentRow = 0;
            } else {
                --findCurrentRow;
            }

            preveiesEvent = 2;

            int tblRows = tblPending.getRowCount();
            breakPoint:
            for (int i = findCurrentRow; i > -1; i--) {

                System.out.println("i>>" + findWay + "-" + i);

                String valueInCell = tblPending.getValueAt(i, searchColumn).toString().trim();
                valueInCell = valueInCell.toLowerCase();

                findVal = findVal.toLowerCase();
                int intIndex = valueInCell.indexOf(findVal);
                if (intIndex == - 1) {
//                    if (findCurrentRow != 0)
//                    {
//                    findCurrentRow = i;
//                    }
                } else {

                    tblPending.setRowSelectionInterval(i, i);
                    tblPending.scrollRectToVisible(new Rectangle(tblPending.getCellRect(i, searchColumn, true)));
//                    --findCurrentRow;
                    break breakPoint;
                }

            }
        }

    }

    private void showMessageInf() {

        int selectedRow = tblPending.getSelectedRow();
        String phnNo = tblPending.getValueAt(selectedRow, 6).toString().trim();
        String msg = tblPending.getValueAt(selectedRow, 7).toString().trim();
        String msgStutas = tblPending.getValueAt(selectedRow, 8).toString().trim();

        showMessageDetails_INF.showMessage(phnNo, msg, msgStutas);

    }

    public void closeMessageInf() {
        if (showMessageDetails_INF != null) {
            showMessageDetails_INF.dispose();
        }
    }

}

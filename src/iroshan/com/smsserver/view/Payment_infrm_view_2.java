/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iroshan.com.smsserver.view;

import iroshan.com.common.utility.MyMessagesUtility;
import iroshan.com.smsserver.enums.MessageStatusEnum;
import iroshan.Company_Profile;
import iroshan.com.smsserver.enums.MyMessageTypeEnum;
import iroshan.com.smsserver.pojo.PaymentSMS_pojo;
import iroshan.com.smsserver.service.MySMSServer;
import iroshan.com.smsserver.service.Payment_service;
import iroshan.com.smsserver.service.SMSCount_Service;
import iroshan.com.smsserver.service.SendMessage;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.smslib.OutboundMessage;

/**
 *
 * @author Iroshan
 */
public class Payment_infrm_view_2 extends javax.swing.JInternalFrame {

    ShowMessageDetails_INF showMessageDetails_INF = new ShowMessageDetails_INF();
    
    static Payment_infrm_view_2 payment_infrm_view = null;
    public static List<PaymentSMS_pojo> paymentList;

    Thread trdSend = null;
    Payment_service payment_service = null;
    SendMessage sendMessage = null;

    int currentRow = 0;
    int findCurrentRow = 0;
    int preveiesEvent = -1; // 1= down 2=up



//  WAITING DIALOG - START ***************************************
    WaitingDialogSMSSend waitingDialogSMSSend;
    Thread trdWaiting;
    // WAITING DIALOG - END ******************************************




    /**
     * Creates new form ArrearsJIFrame_view
     */
    public Payment_infrm_view_2() {
        initComponents();
        payment_infrm_view = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPending = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("New Payments 2");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iroshan/com/smsserver/view/Messaging.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(950, 550));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Branch Code: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblPending.setAutoCreateRowSorter(true);
        tblPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "VOUCHER NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPending.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPending.setFillsViewportHeight(true);
        tblPending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPendingMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblPending);
        if (tblPending.getColumnModel().getColumnCount() > 0) {
            tblPending.getColumnModel().getColumn(6).setPreferredWidth(160);
            tblPending.getColumnModel().getColumn(7).setPreferredWidth(400);
        }

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("SEND");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Select All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Unselect All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("MARK AS SEND");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton9.setText("CLOSE");

        jButton2.setLabel("Show Message");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadNewPayment();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        sendSms_2();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void tblPendingMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPendingMouseReleased
    {//GEN-HEADEREND:event_tblPendingMouseReleased
//        tblSelectProsesing ();
    }//GEN-LAST:event_tblPendingMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        selectAllProcessing();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        unselectAllProcessing();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        markAsSend();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        showMessageInf();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing

        closeMessageInf();
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tblPending;
    // End of variables declaration//GEN-END:variables










    public static Payment_infrm_view_2 getPayment_infrm_view() {
        return payment_infrm_view;
    }

    public static void setPayment_infrm_view(Payment_infrm_view_2 payment_infrm_view) {
        Payment_infrm_view_2.payment_infrm_view = payment_infrm_view;
    }

    public static List<PaymentSMS_pojo> getPaymentList() {
        return paymentList;
    }

    public static void setPaymentList(List<PaymentSMS_pojo> paymentList) {
        Payment_infrm_view_2.paymentList = paymentList;
    }







    private void loadNewPayment() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                
                String brCode = jTextField1.getText().trim();                
                paymentList = new Payment_service().getNewPaymentsList(brCode);
                loadPaymentToTables();
            }
        }).start();
    }







    public void loadPaymentToTables(String recipientPara, String textPara, String messageStatusStringPara) {

        String recipient = recipientPara;
        String text = textPara;
        String messageStatusString = messageStatusStringPara;


// List<ReceiptSMS_pojo> receiptList;
        List<PaymentSMS_pojo> outstandingMap = paymentList;
        if (outstandingMap != null) {

            for (int i = 0; i < outstandingMap.size(); i++) {
                PaymentSMS_pojo loanPojo = outstandingMap.get(i);

//            }
//            for (Loan_pojo outstandingMapObj : outstandingMap)
//            {

//                Integer key = entrySet.getKey ();
//                Loan_pojo loanPojo = outstandingMapObj;

                String telList = loanPojo.getTelNo().trim();
                String msgList = loanPojo.getMessage().trim();


//                System.out.println ("text>>" + text + " / telList>>" + msgList);

                if (recipient.equalsIgnoreCase(telList) && text.equalsIgnoreCase(msgList)) {
                    outstandingMap.remove(i);
                    loanPojo.setMsgStatus(messageStatusString);
                    outstandingMap.add(loanPojo);
//                    new SendMessageSaveDao ().saveToDB (MyMessageTypeEnum.OUTSTANDING.toString (), -1, telList, msgList, om.getDate ());
                }

            }


        }


        loadPaymentToTables();


    }



    public void loadPaymentToTables() {


//        PENDING
        DefaultTableModel dfTblMdPending = (DefaultTableModel) tblPending.getModel();
        int rowCountPending = dfTblMdPending.getRowCount();

        for (int i = 0; i < rowCountPending; i++) {
            dfTblMdPending.removeRow(0);
        }

//        SENT
//        DefaultTableModel dfTblMdSent = (DefaultTableModel) tblSent.getModel ();
//        int rowCountSent = dfTblMdSent.getRowCount ();
//
//        for (int i = 0 ; i < rowCountSent ; i++)
//        {
//            dfTblMdSent.removeRow (0);
//        }

//        UNSENT
//        DefaultTableModel dfTblMdUnsent = (DefaultTableModel) tblUnsent.getModel ();
//        int rowCountUnsent = dfTblMdUnsent.getRowCount ();
//
//        for (int i = 0 ; i < rowCountUnsent ; i++)
//        {
//            dfTblMdUnsent.removeRow (0);
//        }


        int rowNo = 0;
        for (PaymentSMS_pojo paymentListObj : paymentList) {
            ++rowNo;

            String status = paymentListObj.getMsgStatus();
            System.out.println("status>" + status);
            if (status.equalsIgnoreCase(MessageStatusEnum.PENDING.toString())) {
                dfTblMdPending.addRow(new Object[]{
                    paymentListObj.getIsSelected(), rowNo, paymentListObj.getPaymentNo(), paymentListObj.getCusCode(), paymentListObj.getCusName(), paymentListObj.getCusOfficeNo(), paymentListObj.getTelNo(),
                    paymentListObj.getMessage(), paymentListObj.getMsgStatus()
                });
            }

//            else if (status.equalsIgnoreCase (MessageStatusEnum.SENT.toString ()))
//            {
//                dfTblMdSent.addRow (new Object[]
//                {
//                    paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
//                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
//                });
//            } else if (status.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()))
//            {
//                dfTblMdUnsent.addRow (new Object[]
//                {
//                    paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
//                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
//                });
//            } else if (status.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ()))
//            {
//                dfTblMdUnsent.addRow (new Object[]
//                {
//                    paymentListObj.getIsSelected (), paymentListObj.getPaymentNo (), paymentListObj.getCusCode (), paymentListObj.getCusName (), paymentListObj.getCusOfficeNo (), paymentListObj.getTelNo (),
//                    paymentListObj.getMessage (), paymentListObj.getMsgStatus ()
//                });
//            }



        }

        tblPending.revalidate();
    }





    private void sendSms() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {
//                    ---------------------------------------------
                    Company_Profile.setMsgSendStart(true);
//                    ---------------------------------------------

                    List<PaymentSMS_pojo> paymentList2 = new ArrayList<PaymentSMS_pojo>();

                    DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
                    int rowCount = dfTblMd.getRowCount();
                    for (int i = 0; i < rowCount; i++) {
                        Boolean isSelected2 = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString());

                        String phoneNo = dfTblMd.getValueAt(i, 5).toString();
                        String message = dfTblMd.getValueAt(i, 6).toString();

                        PaymentSMS_pojo loanPojo = new PaymentSMS_pojo();
                        loanPojo.setIsSelected(isSelected2);
                        loanPojo.setTelNo(phoneNo);
                        loanPojo.setMessage(message);

                        paymentList2.add(loanPojo);
                    }

                    if (paymentList2.size() > 0) {
//            new Loan_service ().sendDueSms (loanArearsMap2);
                        new Payment_service().sendPaymentSms(paymentList2);
                    }
                }

            }
        }).start();

    }








    private void sendSms_2() {

        trdSend = new Thread(new Runnable() {
            @Override
            public void run() {


                String messageType = MyMessageTypeEnum.NEW_PAYMENT.toString().trim();
                int sentSMSCount = 0;
                int sentConfirmSMSCount = 0;

                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

                    try {
                        //-------------------------------------------------------
                        trdWaiting = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                waitingDialogSMSSend = new WaitingDialogSMSSend("", "Starting ...", ApplicationDesktop.appDesktop, true);
                                waitingDialogSMSSend.setVisible(true);
                            }
                        });
                        trdWaiting.start();
                        //-------------------------------------------------------


                        if (payment_service == null) {
                            payment_service = new Payment_service();
                        }
                        if (sendMessage == null) {
                            sendMessage = new SendMessage();
                        }
                        // --------------------------------------------------
                        Company_Profile.setMsgSendStart(true);
                        // --------------------------------------------------


                        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
                        int rowCount = dfTblMd.getRowCount();


                        //-------------------------------------
                        MySMSServer.restartService();
                        //-------------------------------------




                        OutboundMessage.MessageStatuses confirmStart = sendMessage.sendConfirm_1(Company_Profile.getConfirmTeleNo(), messageType + " sending start.");
                        if (!confirmStart.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            MyMessagesUtility.showWarning(messageType + " " + confirmStart.toString());
                        } else if (confirmStart.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            ++sentConfirmSMSCount;
                        }






                        outerLoop:
                        for (int i = currentRow; i < rowCount; i++) {

                            if (!Company_Profile.getMsgSendStart()) // IF MSG SENDING STOPED
                            {
                                break outerLoop;
                            }


                            int j = i;
                            ++j;


                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Jurnal_if_view_2.class.getName()).log(Level.SEVERE, null, ex);
                            }


                            //----------------------------------------
                            String customeMessage = "On Processing : " + j + "/" + rowCount;
                            waitingDialogSMSSend.setCustomMessage(customeMessage);

                            tblPending.setRowSelectionInterval(i, i);
                            tblPending.scrollRectToVisible(new Rectangle(tblPending.getCellRect(i, 0, true)));
                            //----------------------------------------


                            Boolean isSelected = Boolean.valueOf(String.valueOf(dfTblMd.getValueAt(i, 0)));
                            if (isSelected) {
                                if (!dfTblMd.getValueAt(i, 8).toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString())) {
                                    String voucherNo = String.valueOf(dfTblMd.getValueAt(i, 2));
                                    String cusCode = String.valueOf(dfTblMd.getValueAt(i, 3));
                                    String phoneNo = String.valueOf(dfTblMd.getValueAt(i, 6));
                                    String message = String.valueOf(dfTblMd.getValueAt(i, 7));

                                    // SEND
                                    OutboundMessage.MessageStatuses msgStatus = payment_service.sendSMS_2(phoneNo, message, cusCode, voucherNo);
                                    if (msgStatus.toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString().trim())) {
                                        ++sentSMSCount;
                                    }
                                    dfTblMd.setValueAt(msgStatus.toString(), i, 8);
                                }

                            }
                            currentRow = i;
                        }

                        waitingDialogSMSSend.dispose();
                        trdWaiting.interrupt();


                        OutboundMessage.MessageStatuses confirmEnd = sendMessage.sendConfirm_1(Company_Profile.getConfirmTeleNo(), messageType + " sending end with " + sentSMSCount + " messages.");
                        if (!confirmEnd.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            MyMessagesUtility.showWarning("Message to member 2 " + confirmEnd.toString());
                        } else if (confirmEnd.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            ++sentConfirmSMSCount;
                        }


                        new SMSCount_Service().saveSMSCount(messageType, sentSMSCount);
                        new SMSCount_Service().saveSMSCount(MyMessageTypeEnum.CONFIRM.toString().trim(), sentConfirmSMSCount);



                    } catch (Exception ex) {
                        MyMessagesUtility.showError(ex.toString());
                        Logger.getLogger(Payment_infrm_view_2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        trdSend.start();

    }








//    private void reSendSms ()
//    {
//        new Thread (new Runnable ()
//        {
//            @Override
//            public void run ()
//            {
//                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
//                {
//
////                    --------------------------------------
//                    Company_Profile.setMsgSendStart (true);
////                    --------------------------------------
//                    List<PaymentSMS_pojo> paymentList2 = new ArrayList<PaymentSMS_pojo> ();
//
//                    DefaultTableModel dfTblMd = (DefaultTableModel) tblUnsent.getModel ();
//                    int rowCount = dfTblMd.getRowCount ();
//                    for (int i = 0 ; i < rowCount ; i++)
//                    {
//                        String msgStatus = dfTblMd.getValueAt (i, 7).toString ().trim ();
//                        Boolean isSelect = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ().trim ());
//                        if (isSelect && (msgStatus.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()) || msgStatus.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ())))
//                        {
//                            String phoneNo = dfTblMd.getValueAt (i, 5).toString ();
//                            String message = dfTblMd.getValueAt (i, 6).toString ();
//
//                            PaymentSMS_pojo loanPojo = new PaymentSMS_pojo ();
//                            loanPojo.setIsSelected (isSelect);
//                            loanPojo.setTelNo (phoneNo);
//                            loanPojo.setMessage (message);
//
//                            paymentList2.add (loanPojo);
//                        }
//
//                    }
//
//                    if (paymentList2.size () > 0)
//                    {
////            new Loan_service ().sendDueSms (loanArearsMap2);
//                        new Payment_service ().reSendPaymentSms (paymentList2);
//                    }
//                }
//
//            }
//        }).start ();
//    }


    private void tblSelectProsesing() {

        int rowNo = tblPending.getSelectedRow();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(rowNo, 0).toString().trim());
        String cusCode = dfTblMd.getValueAt(rowNo, 1).toString().trim();
        String tel = dfTblMd.getValueAt(rowNo, 2).toString().trim();
        String msg = dfTblMd.getValueAt(rowNo, 3).toString().trim();


        List<PaymentSMS_pojo> loanArearsMap = getPaymentList();
        for (int i = 0; i < loanArearsMap.size(); i++) {
            PaymentSMS_pojo loanPojo = loanArearsMap.get(i);



            String listCusCode = loanPojo.getCusCode().trim();
            String listTel = loanPojo.getTelNo().trim();
            String listMsg = loanPojo.getMessage().trim();

            if (listCusCode.equalsIgnoreCase(cusCode) && listTel.equalsIgnoreCase(tel) && listMsg.equalsIgnoreCase(msg)) {
                loanArearsMap.remove(loanPojo);
            }
            loanPojo.setIsSelected(isSelected);
            loanArearsMap.add(loanPojo);

        }
    }

    private void selectAllProcessing() {
        List<PaymentSMS_pojo> loanArearsMap = getPaymentList();

        int size = loanArearsMap.size();

        for (int i = 0; i < size; i++) {
            PaymentSMS_pojo loanPojo = loanArearsMap.get(i);

            loanArearsMap.remove(loanPojo);

            loanPojo.setIsSelected(true);
            loanArearsMap.add(i, loanPojo);

        }

        loadPaymentToTables();
    }

    private void unselectAllProcessing() {
        List<PaymentSMS_pojo> loanArearsMap = getPaymentList();
        int size = loanArearsMap.size();
        for (int i = 0; i < size; i++) {
            PaymentSMS_pojo loanPojo = loanArearsMap.get(i);

            loanArearsMap.remove(loanPojo);

            loanPojo.setIsSelected(false);
            loanArearsMap.add(i, loanPojo);

        }

        loadPaymentToTables();
    }






    private void markAsSend() {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

            List<String> list = new ArrayList<String>();

            DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
            int rowCount = dfTblMd.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                Boolean isSelected2 = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString());

                if (isSelected2) {
                    String paymentNo = dfTblMd.getValueAt(i, 2).toString();
                    list.add(paymentNo);
                }
            }


            if (list.size() > 0) {
                new Payment_service().markAsSend(list);
                loadNewPayment();
            } else {
                MyMessagesUtility.showWarning("Mark at least one record.");
            }

//            new Jurnal_service ().alterFT_DTAIL ();
        }
    }

    private void stopSending() {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?.") == 0) {
            Company_Profile.setMsgSendStart(false);
        }
    }



    private void showMessageInf() {

        int selectedRow = tblPending.getSelectedRow();
        String phnNo = tblPending.getValueAt(selectedRow, 6).toString().trim();
        String msg = tblPending.getValueAt(selectedRow, 7).toString().trim();
        String msgStatus = tblPending.getValueAt(selectedRow, 8).toString().trim();
        
        showMessageDetails_INF.showMessage(phnNo, msg, msgStatus);


    }

    public void closeMessageInf() {
        if (showMessageDetails_INF != null) {
            showMessageDetails_INF.dispose();
        }
    }


}

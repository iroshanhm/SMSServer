/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iroshan.com.smsserver.view;

import iroshan.com.common.utility.MyMessagesUtility;
import iroshan.com.common.utility.MyPhoneNoFormatingUtility;
import iroshan.com.smsserver.enums.MessageStatusEnum;
import iroshan.Company_Profile;
import iroshan.com.smsserver.pojo.ReceiptSMS_pojo;
import iroshan.com.smsserver.service.Jurnal_service;
import iroshan.com.smsserver.service.MySMSServer;
import iroshan.com.smsserver.service.Receipt_service;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.smslib.OutboundMessage;

/**
 *
 * @author Iroshan
 */
public class ReceiptJIFrame_view extends javax.swing.JInternalFrame
{

    public static ReceiptJIFrame_view receiptJIFrame_view = null;
    static List<ReceiptSMS_pojo> receiptList;

    
    
    Receipt_service receipt_service = null;
    Thread trdSend = null;
    int currentRow = 0;
    int findCurrentRow = 0;
    int preveiesEvent = -1; // 1= down 2=up


    //  WAITING DIALOG - START ***************************************
    WaitingDialogSMSSend waitingDialogSMSSend;
    Thread trdWaiting;
    // WAITING DIALOG - END *****************
    
    
    
    
    /**
     * Creates new form ArrearsJIFrame_view
     */
    public ReceiptJIFrame_view ()
    {
        initComponents ();
        receiptJIFrame_view = this;
//        tblPending.setDefaultRenderer (Object.class, new CustomTableCellRenderForSendReceiptSMS ());
//        new CustomTableCellRenderForSendReceiptSMS ().setCustomCellRender (tblSendSMS);
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings ("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPending = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSent = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblUnsent = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("New Receipts 2");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iroshan/com/smsserver/view/Messaging.png"))); // NOI18N

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("SEND");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tblPending.setAutoCreateRowSorter(true);
        tblPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "RECEIPT NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPending.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblPending.setFillsViewportHeight(true);
        tblPending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPendingMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblPending);
        if (tblPending.getColumnModel().getColumnCount() > 0) {
            tblPending.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        jButton4.setText("Select All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Unselect All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("MARK AS SEND");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setText("CLOSE");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton9.setText("STOP SENDING");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(jButton8)
                    .addComponent(jButton9))
                .addContainerGap())
        );

        jTabbedPane1.addTab("PENDING", jPanel2);

        tblSent.setAutoCreateRowSorter(true);
        tblSent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RECEIPT NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSent.setFillsViewportHeight(true);
        jScrollPane2.setViewportView(tblSent);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("SENT", jPanel4);

        tblUnsent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "RECEIPT NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUnsent.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(tblUnsent);

        jButton7.setText("RE-SEND");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap())
        );

        jTabbedPane1.addTab("UNSENT", jPanel5);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadSendingReceiptToList ();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        sendSms_2 ();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void tblPendingMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPendingMouseReleased
    {//GEN-HEADEREND:event_tblPendingMouseReleased

//        tblSelectProcessing ();

    }//GEN-LAST:event_tblPendingMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        selectAllProcessing ();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        unselectAllProcessing ();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed

        markAsSend ();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton7ActionPerformed
    {//GEN-HEADEREND:event_jButton7ActionPerformed
        reSend ();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed
    {//GEN-HEADEREND:event_jButton8ActionPerformed
        close ();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton9ActionPerformed
    {//GEN-HEADEREND:event_jButton9ActionPerformed
        stopSending ();
    }//GEN-LAST:event_jButton9ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTable tblPending;
    private static javax.swing.JTable tblSent;
    private static javax.swing.JTable tblUnsent;
    // End of variables declaration//GEN-END:variables


    public static ReceiptJIFrame_view getReceiptJIFrame_view ()
    {
        return receiptJIFrame_view;
    }

    public static void setReceiptJIFrame_view (ReceiptJIFrame_view receiptJIFrame_view)
    {
        ReceiptJIFrame_view.receiptJIFrame_view = receiptJIFrame_view;
    }










    void loadSendingReceiptToList ()
    {
        new Thread (new Runnable ()
        {

            @Override
            public void run ()
            {
//                receiptList = new Receipt_service ().getNewReceiptsList ();
                loadReceiptToTables ();
            }
        }).start ();

    }






    public void loadReceiptToTables (String recipientPara, String textPara, String messageStatusStringPara)
    {

        String recipient = recipientPara;
        String text = textPara;
        String messageStatusString = messageStatusStringPara;



// List<ReceiptSMS_pojo> receiptList;
//        List<ReceiptSMS_pojo> outstandingMap = receiptList;
        if (receiptList != null)
        {
            for (int i = 0 ; i < receiptList.size () ; i++)
            {
                ReceiptSMS_pojo loanPojo = receiptList.get (i);

                String telList = loanPojo.getTelNo ().trim ();
                String msgList = loanPojo.getMessage ().trim ();

                recipient = MyPhoneNoFormatingUtility.formatToPlus94Number (recipient);
                telList = MyPhoneNoFormatingUtility.formatToPlus94Number (telList);


                System.out.println ("**************************");
                System.out.println ("recipient>" + recipient);
                System.out.println ("telList>" + telList);
                System.out.println ("text>" + text);
                System.out.println ("msgList>" + msgList);
                System.out.println ("**************************");

                if (recipient.equalsIgnoreCase (telList) && text.equalsIgnoreCase (msgList))
                {
                    receiptList.remove (i);
                    System.out.println ("messageStatusString >>>>>>>>>>>>>" + messageStatusString);
                    loanPojo.setMsgStatus (messageStatusString);
                    receiptList.add (loanPojo);
//                    new SendMessageSaveDao ().saveToDB (MyMessageTypeEnum.OUTSTANDING.toString (), -1, telList, msgList, om.getDate ());
                }

            }
        }

        loadReceiptToTables ();


    }









    public void loadReceiptToTables ()
    {


//        PENDING
        DefaultTableModel dfTblMdPending = (DefaultTableModel) tblPending.getModel ();
        int rowCountPending = dfTblMdPending.getRowCount ();

        for (int i = 0 ; i < rowCountPending ; i++)
        {
            dfTblMdPending.removeRow (0);
        }

//        SENT
        DefaultTableModel dfTblMdSent = (DefaultTableModel) tblSent.getModel ();
        int rowCountSent = dfTblMdSent.getRowCount ();

        for (int i = 0 ; i < rowCountSent ; i++)
        {
            dfTblMdSent.removeRow (0);
        }

//        UNSENT
        DefaultTableModel dfTblMdUnsent = (DefaultTableModel) tblUnsent.getModel ();
        int rowCountUnsent = dfTblMdUnsent.getRowCount ();

        for (int i = 0 ; i < rowCountUnsent ; i++)
        {
            dfTblMdUnsent.removeRow (0);
        }


//        List<ReceiptSMS_pojo> receiptSMSPojo = receiptList;
        int rowSize = receiptList.size ();
        for (int i = 0 ; i < rowSize ; i++)
        {
            ReceiptSMS_pojo receiptListObj = receiptList.get (i);

//        }
//
//        for (ReceiptSMS_pojo receiptListObj : getReceiptList ())
//        {

            String status = receiptListObj.getMsgStatus ();
            status = status.trim ();
            Boolean isSelected = receiptListObj.getIsSelected ();


            if (status.equalsIgnoreCase (MessageStatusEnum.PENDING.toString ()))
            {
                dfTblMdPending.addRow (new Object[]
                {
                    isSelected, receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getCusOfficeNo (), receiptListObj.getTelNo (),
                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.QUEUE.toString ()))
            {
                dfTblMdPending.addRow (new Object[]
                {
                    receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getCusOfficeNo (), receiptListObj.getTelNo (),
                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.SENT.toString ()))
            {
                dfTblMdSent.addRow (new Object[]
                {
                    receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getCusOfficeNo (), receiptListObj.getTelNo (),
                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()))
            {
                dfTblMdUnsent.addRow (new Object[]
                {
                    isSelected, receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getTelNo (),
                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
                });
            } else if (status.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ().trim ()))
            {
                dfTblMdUnsent.addRow (new Object[]
                {
                    isSelected, receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getCusOfficeNo (), receiptListObj.getTelNo (),
                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
                });
            }



        }
        tblPending.revalidate ();
    }










    private void sendSms ()
    {
        new Thread (new Runnable ()
        {
            @Override
            public void run ()
            {


                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
                {
//                    ---------------------------------------
                    Company_Profile.setMsgSendStart (true);
//                    ----------------------------------------


                    List<ReceiptSMS_pojo> paymentList2 = new ArrayList<ReceiptSMS_pojo> ();

                    DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
                    int rowCount = dfTblMd.getRowCount ();
                    for (int i = 0 ; i < rowCount ; i++)
                    {
                        Boolean isSelected2 = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ());
                        String receiptNo = dfTblMd.getValueAt (i, 1).toString ();
                        String phoneNo = dfTblMd.getValueAt (i, 5).toString ();
                        String message = dfTblMd.getValueAt (i, 6).toString ();

                        ReceiptSMS_pojo loanPojo = new ReceiptSMS_pojo ();
                        loanPojo.setIsSelected (isSelected2);
                        loanPojo.setReceiptNo (receiptNo);
                        loanPojo.setTelNo (phoneNo);

                        loanPojo.setMessage (message);

                        paymentList2.add (loanPojo);



//                        changeStatusToQueue (phoneNo, message);
                    }

                    if (paymentList2.size () > 0)
                    {
                        new Receipt_service ().sendReceiptSms (paymentList2);
                    }

                }
            }
        }).start ();
    }








    private void sendSms_2 ()
    {

        trdSend = new Thread (new Runnable ()
        {
            @Override
            public void run ()
            {

                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
                {

                    //-------------------------------------------------------        
                    trdWaiting = new Thread (new Runnable ()
                    {
                        @Override
                        public void run ()
                        {
                            waitingDialogSMSSend = new WaitingDialogSMSSend ("", "Starting ...", ApplicationDesktop.appDesktop, true);
                            waitingDialogSMSSend.setVisible (true);
                        }
                    });
                    trdWaiting.start ();
                    //-------------------------------------------------------


                    if (receipt_service == null)
                    {
                        receipt_service = new Receipt_service ();
                    }

                    // --------------------------------------------------
                    Company_Profile.setMsgSendStart (true);
                    // --------------------------------------------------


                    DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
                    int rowCount = dfTblMd.getRowCount ();


                    //-------------------------------------
                    MySMSServer.restartService ();
                    //-------------------------------------


                    outerLoop:
                    for (int i = currentRow ; i < rowCount ; i++)
                    {

                        if (!Company_Profile.getMsgSendStart ()) // IF MSG SENDING STOPED
                        {
                            break outerLoop;
                        }


                        int j = i;
                        ++j;


                        try
                        {
                            Thread.sleep (500);
                        } catch (InterruptedException ex)
                        {
                            Logger.getLogger (Jurnal_if_view_2.class.getName ()).log (Level.SEVERE, null, ex);
                        }


                        //----------------------------------------
                        String customeMessage = "On Processing : " + j + "/" + rowCount;
                        waitingDialogSMSSend.setCustomMessage (customeMessage);

                        tblPending.setRowSelectionInterval (i, i);
                        tblPending.scrollRectToVisible (new Rectangle (tblPending.getCellRect (i, 0, true)));
                        //----------------------------------------


                        Boolean isSelected = Boolean.valueOf (String.valueOf (dfTblMd.getValueAt (i, 0)));
                        if (isSelected)
                        {
                            if (!dfTblMd.getValueAt (i, 8).toString ().trim ().equalsIgnoreCase (OutboundMessage.MessageStatuses.SENT.toString ()))
                            {
                                try {
                                    String jCode = String.valueOf (dfTblMd.getValueAt (i, 2));
                                    String cusCode = String.valueOf (dfTblMd.getValueAt (i, 3));
                                    String phoneNo = String.valueOf (dfTblMd.getValueAt (i, 6));
                                    String message = String.valueOf (dfTblMd.getValueAt (i, 7));
                                    
                                    // SEND
                                    OutboundMessage.MessageStatuses msgStatus = receipt_service.sendSMS_2 (phoneNo, message, cusCode, jCode);
                                    
                                    dfTblMd.setValueAt (msgStatus.toString (), i, 8);
                                } catch (Exception ex) {
                                    Logger.getLogger(ReceiptJIFrame_view.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }

                        }
                        currentRow = i;
                    }

                    waitingDialogSMSSend.dispose ();
                    trdWaiting.interrupt ();
                }
            }
        });
        trdSend.start ();

    }








    private void tblSelectProcessing ()
    {

//        int rowNo = tblPending.getSelectedRow ();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
        int dfTblMdSize = dfTblMd.getRowCount ();
        for (int j = 0 ; j < dfTblMdSize ; j++)
        {
            Boolean isSelected = Boolean.valueOf (dfTblMd.getValueAt (j, 0).toString ().trim ());
            String cusCode = dfTblMd.getValueAt (j, 1).toString ().trim ();
            String tel = dfTblMd.getValueAt (j, 2).toString ().trim ();
            String msg = dfTblMd.getValueAt (j, 3).toString ().trim ();


//            List<ReceiptSMS_pojo> loanArearsMap = receiptList;
            for (int i = 0 ; i < receiptList.size () ; i++)
            {
                ReceiptSMS_pojo loanPojo = receiptList.get (i);

                String listCusCode = loanPojo.getCusCode ().trim ();
                String listTel = loanPojo.getTelNo ().trim ();
                String listMsg = loanPojo.getMessage ().trim ();

                if (listCusCode.equalsIgnoreCase (cusCode) && listTel.equalsIgnoreCase (tel) && listMsg.equalsIgnoreCase (msg))
                {
                    receiptList.remove (loanPojo);
                }

                loanPojo.setIsSelected (isSelected);
                receiptList.add (loanPojo);

            }
        }
    }


    private void selectAllProcessing ()
    {
        List<ReceiptSMS_pojo> loanArearsMap = receiptList;
        int size = loanArearsMap.size ();
        for (int i = 0 ; i < size ; i++)
        {
            ReceiptSMS_pojo loanPojo = loanArearsMap.get (i);

            loanArearsMap.remove (loanPojo);

            loanPojo.setIsSelected (true);
            loanArearsMap.add (i, loanPojo);

        }

        loadReceiptToTables ();
    }

    private void unselectAllProcessing ()
    {
        List<ReceiptSMS_pojo> loanArearsMap = receiptList;
        int size = loanArearsMap.size ();
        for (int i = 0 ; i < size ; i++)
        {
            ReceiptSMS_pojo loanPojo = loanArearsMap.get (i);

            loanArearsMap.remove (loanPojo);

            loanPojo.setIsSelected (false);
            loanArearsMap.add (i, loanPojo);

        }

        loadReceiptToTables ();
    }

    private void markAsSend ()
    {

        if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
        {

            List<String> list = new ArrayList<String> ();

            DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
            int rowCount = dfTblMd.getRowCount ();
            for (int i = 0 ; i < rowCount ; i++)
            {
                Boolean isSelected2 = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ());
                if (isSelected2)
                {
                    String receiptNo = dfTblMd.getValueAt (i, 1).toString ();
                    list.add (receiptNo);
                }


            }




//            List<ReceiptSMS_pojo> receiptList2 = receiptList;
//            for (ReceiptSMS_pojo receiptSMS_pojo : receiptList2)
//            {
//                if (receiptSMS_pojo.getIsSelected ())
//                {
//                    String receiptNO = receiptSMS_pojo.getReceiptNo ();
//                    list.add (receiptNO);
//                    System.out.println ("receiptNO>>" + receiptNO);
//                }
//
//            }

            if (list.size () > 0)
            {
                new Receipt_service ().markAsSend (list);
                loadSendingReceiptToList ();
            } else
            {
                MyMessagesUtility.showWarning ("Mark at least one record.");
            }


//            new Jurnal_service ().alterFT_DTAIL ();
        }
    }




//    private void changeStatusToQueue (String teleNoPara, String MessagePara)
//    {
//
//
//        String recipient = teleNoPara;
//        String msgText = MessagePara;
//
//        List<ReceiptSMS_pojo> receiptList = receiptList;
//        if (receiptList != null)
//        {
//            for (int i = 0 ; i < receiptList.size () ; i++)
//            {
//                ReceiptSMS_pojo listObj = receiptList.get (i);
//
//                String telList = listObj.getTelNo ().trim ();
//                String msgList = listObj.getMessage ().trim ();
//
//                if (recipient.equalsIgnoreCase (telList) && msgText.equalsIgnoreCase (msgList))
//                {
//                    receiptList.remove (i);
//                    listObj.setMsgStatus ("QUEUE");
//                    receiptList.add (i, listObj);
//
//                }
//            }
//        }
//
//        loadReceiptToTables ();
//    }

    private void reSend ()
    {
        new Thread (new Runnable ()
        {
            @Override
            public void run ()
            {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
                {

                    //                    --------------------------------------
                    Company_Profile.setMsgSendStart (true);
//                    --------------------------------------


                    List<ReceiptSMS_pojo> paymentList2 = new ArrayList<ReceiptSMS_pojo> ();

                    DefaultTableModel dfTblMd = (DefaultTableModel) tblUnsent.getModel ();
                    int rowCount = dfTblMd.getRowCount ();
                    for (int i = 0 ; i < rowCount ; i++)
                    {
                        Boolean isSelected2 = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ());
                        String receiptNo = dfTblMd.getValueAt (i, 1).toString ();
                        String phoneNo = dfTblMd.getValueAt (i, 5).toString ();
                        String message = dfTblMd.getValueAt (i, 6).toString ();
                        String msgStatus = dfTblMd.getValueAt (i, 7).toString ().trim ();

                        if (isSelected2 && (msgStatus.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()) || msgStatus.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ())))
                        {
                            ReceiptSMS_pojo loanPojo = new ReceiptSMS_pojo ();
                            loanPojo.setIsSelected (isSelected2);
                            loanPojo.setReceiptNo (receiptNo);
                            loanPojo.setTelNo (phoneNo);

                            loanPojo.setMessage (message);

                            paymentList2.add (loanPojo);
                        }

                    }

                    if (paymentList2.size () > 0)
                    {
                        new Receipt_service ().reSendReceiptSms (paymentList2);
                    }
                }
            }
        }).start ();
    }



    private void tblUnsentSelectionProsesing ()
    {

        DefaultTableModel dfTblMd = (DefaultTableModel) tblUnsent.getModel ();
        int rowCount = dfTblMd.getRowCount ();
        for (int j = 0 ; j < rowCount ; j++)
        {
            Boolean isSelectedBoo = Boolean.getBoolean (dfTblMd.getValueAt (j, 0).toString ().trim ());
            String ac = dfTblMd.getValueAt (j, 1).toString ().trim ();
            String cusCode = dfTblMd.getValueAt (j, 2).toString ().trim ();


//List<ReceiptSMS_pojo> receiptList;

            List<ReceiptSMS_pojo> loanArearsMap = receiptList;
            for (int i = 0 ; i < loanArearsMap.size () ; i++)
            {
                ReceiptSMS_pojo loanPojo = loanArearsMap.get (i);

                String listCusCode = loanPojo.getCusCode ().trim ();
                String listAC = loanPojo.getReceiptNo ().trim ();

                if (listCusCode.equalsIgnoreCase (cusCode) && listAC.equalsIgnoreCase (ac))
                {
                    loanArearsMap.remove (loanPojo);
                }
                if (isSelectedBoo == true)
                {
                    loanPojo.setIsSelected (false);
                }
                if (isSelectedBoo == false)
                {
                    loanPojo.setIsSelected (false);
                }

                loanArearsMap.add (loanPojo);

            }
        }
    }



    private void tblSentSelectionProsesing ()
    {

        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel ();
        int rowCount = dfTblMd.getRowCount ();
        for (int j = 0 ; j < rowCount ; j++)
        {
            Boolean isSelectedBoo = Boolean.getBoolean (dfTblMd.getValueAt (j, 0).toString ().trim ());
            String ac = dfTblMd.getValueAt (j, 1).toString ().trim ();
            String cusCode = dfTblMd.getValueAt (j, 2).toString ().trim ();



            List<ReceiptSMS_pojo> loanArearsMap = receiptList;
            for (int i = 0 ; i < loanArearsMap.size () ; i++)
            {
                ReceiptSMS_pojo loanPojo = loanArearsMap.get (i);

                String listCusCode = loanPojo.getCusCode ().trim ();
                String listAC = loanPojo.getReceiptNo ().trim ();

                if (listCusCode.equalsIgnoreCase (cusCode) && listAC.equalsIgnoreCase (ac))
                {
                    loanArearsMap.remove (loanPojo);
                }
                if (isSelectedBoo == true)
                {
                    loanPojo.setIsSelected (false);
                }
                if (isSelectedBoo == false)
                {
                    loanPojo.setIsSelected (false);
                }

                loanArearsMap.add (loanPojo);

            }
        }
    }

    private void close ()
    {
        dispose ();
    }

    private void stopSending ()
    {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?.") == 0)
        {
            Company_Profile.setMsgSendStart (false);
        }
    }



}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iroshan.com.smsserver.view;

import iroshan.com.common.utility.MyMessagesUtility;
import iroshan.com.common.utility.MyPhoneNoFormatingUtility;
import iroshan.com.smsserver.enums.MessageStatusEnum;
import iroshan.Company_Profile;
import iroshan.com.common.utility.WindowLocation;
import iroshan.com.smsserver.enums.MyMessageTypeEnum;
import iroshan.com.smsserver.pojo.ReceiptSMS_pojo;
import iroshan.com.smsserver.service.Jurnal_service;
import iroshan.com.smsserver.service.MySMSServer;
import iroshan.com.smsserver.service.Receipt_service;
import iroshan.com.smsserver.service.SMSCount_Service;
import iroshan.com.smsserver.service.SendMessage;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.smslib.OutboundMessage;

/**
 *
 * @author Iroshan
 */
public class ReceiptJIFrame_view_2 extends javax.swing.JInternalFrame {

    ShowMessageDetails_INF showMessageDetails_INF = new ShowMessageDetails_INF();
    
    
    SendMessage sendMessage = null;
    public static ReceiptJIFrame_view_2 receiptJIFrame_view = null;
    static List<ReceiptSMS_pojo> receiptList;

    Receipt_service receipt_service = null;


    Thread trdSend = null;
    int currentRow = 0;
    int findCurrentRow = 0;
    int preveiesEvent = -1; // 1= down 2=up

    //  WAITING DIALOG - START ***************************************
    WaitingDialogSMSSend waitingDialogSMSSend;
    Thread trdWaiting;
    // WAITING DIALOG - END *****************

    /**
     * Creates new form ArrearsJIFrame_view
     */
    public ReceiptJIFrame_view_2() {
        initComponents();
        receiptJIFrame_view = this;
//        tblPending.setDefaultRenderer (Object.class, new CustomTableCellRenderForSendReceiptSMS ());
//        new CustomTableCellRenderForSendReceiptSMS ().setCustomCellRender (tblSendSMS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPending = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        fromDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        toDate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iroshan/com/smsserver/view/Messaging.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(950, 550));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("SEARCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("SEND");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tblPending.setAutoCreateRowSorter(true);
        tblPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "RECEIPT NO", "CUS. CODE", "CUS. NAME", "ACCOUNT OFFICE NO", "TELE. NO", "MESSAGE", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPending.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPending.setFillsViewportHeight(true);
        tblPending.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblPendingMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblPending);
        if (tblPending.getColumnModel().getColumnCount() > 0) {
            tblPending.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        jButton4.setText("Select All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Unselect All");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("MARK AS SEND");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setText("CLOSE");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton2.setText("Show Message");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 894, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(jButton8))
                .addContainerGap())
        );

        jLabel1.setText("From :");

        fromDate.setDate(new Date());
        fromDate.setDateFormatString("yyyy-MM-dd");

        jLabel2.setText("To :");

        toDate.setDate(new Date());
        toDate.setDateFormatString("yyyy-MM-dd");

        jLabel3.setText("Branch Code: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(fromDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadSendingReceiptToList();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        sendSms_2();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tblPendingMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblPendingMouseReleased
    {//GEN-HEADEREND:event_tblPendingMouseReleased

//        tblSelectProcessing ();

    }//GEN-LAST:event_tblPendingMouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        selectAllProcessing();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        unselectAllProcessing();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed

        markAsSend();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed
    {//GEN-HEADEREND:event_jButton8ActionPerformed
        close();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        showMessageInf();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        closeMessageInf();
    }//GEN-LAST:event_formInternalFrameClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser fromDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JTable tblPending;
    private com.toedter.calendar.JDateChooser toDate;
    // End of variables declaration//GEN-END:variables

    public static ReceiptJIFrame_view_2 getReceiptJIFrame_view() {
        return receiptJIFrame_view;
    }

    public static void setReceiptJIFrame_view(ReceiptJIFrame_view_2 receiptJIFrame_view) {
        ReceiptJIFrame_view_2.receiptJIFrame_view = receiptJIFrame_view;
    }

    public static List<ReceiptSMS_pojo> getReceiptList() {
        return receiptList;
    }

    public static void setReceiptList(List<ReceiptSMS_pojo> receiptList) {
        ReceiptJIFrame_view_2.receiptList = receiptList;
    }

    void loadSendingReceiptToList() {
        new Thread(new Runnable() {

            @Override
            public void run() {

                Date fDate = fromDate.getDate();
                Date tDate = toDate.getDate();
                String brCode = jTextField1.getText().trim();

                receiptList = new Receipt_service().getNewReceiptsList(fDate, tDate, brCode);
                loadReceiptToTables();
            }
        }).start();

    }

    public void loadReceiptToTables(String recipientPara, String textPara, String messageStatusStringPara) {

        String recipient = recipientPara;
        String text = textPara;
        String messageStatusString = messageStatusStringPara;

// List<ReceiptSMS_pojo> receiptList;
//        List<ReceiptSMS_pojo> outstandingMap = receiptList;
        if (receiptList != null) {
            for (int i = 0; i < receiptList.size(); i++) {
                ReceiptSMS_pojo loanPojo = receiptList.get(i);

                String telList = loanPojo.getTelNo().trim();
                String msgList = loanPojo.getMessage().trim();

                recipient = MyPhoneNoFormatingUtility.formatToPlus94Number(recipient);
                telList = MyPhoneNoFormatingUtility.formatToPlus94Number(telList);

                System.out.println("**************************");
                System.out.println("recipient>" + recipient);
                System.out.println("telList>" + telList);
                System.out.println("text>" + text);
                System.out.println("msgList>" + msgList);
                System.out.println("**************************");

                if (recipient.equalsIgnoreCase(telList) && text.equalsIgnoreCase(msgList)) {
                    receiptList.remove(i);
                    System.out.println("messageStatusString >>>>>>>>>>>>>" + messageStatusString);
                    loanPojo.setMsgStatus(messageStatusString);
                    receiptList.add(loanPojo);
//                    new SendMessageSaveDao ().saveToDB (MyMessageTypeEnum.OUTSTANDING.toString (), -1, telList, msgList, om.getDate ());
                }

            }
        }

        loadReceiptToTables();

    }

    public void loadReceiptToTables() {

//        PENDING
        DefaultTableModel dfTblMdPending = (DefaultTableModel) tblPending.getModel();
        int rowCountPending = dfTblMdPending.getRowCount();

        for (int i = 0; i < rowCountPending; i++) {
            dfTblMdPending.removeRow(0);
        }

//        SENT
//        DefaultTableModel dfTblMdSent = (DefaultTableModel) tblSent.getModel ();
//        int rowCountSent = dfTblMdSent.getRowCount ();
//
//        for (int i = 0 ; i < rowCountSent ; i++)
//        {
//            dfTblMdSent.removeRow (0);
//        }
//        UNSENT
//        DefaultTableModel dfTblMdUnsent = (DefaultTableModel) tblUnsent.getModel ();
//        int rowCountUnsent = dfTblMdUnsent.getRowCount ();
//
//        for (int i = 0 ; i < rowCountUnsent ; i++)
//        {
//            dfTblMdUnsent.removeRow (0);
//        }
        int rowNo = 0;
        for (ReceiptSMS_pojo receiptListObj : receiptList) {

            System.out.println("receiptListObj.getMessage()>>" + receiptListObj.getMessage());

            ++rowNo;
            String status = receiptListObj.getMsgStatus();

            if (status.equalsIgnoreCase(MessageStatusEnum.PENDING.toString())) {
                dfTblMdPending.addRow(new Object[]{
                    receiptListObj.getIsSelected(), rowNo, receiptListObj.getReceiptNo(), receiptListObj.getCusCode(), receiptListObj.getCusName(), receiptListObj.getCusOfficeNo(), receiptListObj.getTelNo(),
                    receiptListObj.getMessage(), receiptListObj.getMsgStatus()
                });
            } else if (status.equalsIgnoreCase(MessageStatusEnum.QUEUE.toString())) {
                dfTblMdPending.addRow(new Object[]{
                    receiptListObj.getIsSelected(), rowNo, receiptListObj.getReceiptNo(), receiptListObj.getCusCode(), receiptListObj.getCusName(), receiptListObj.getCusOfficeNo(), receiptListObj.getTelNo(),
                    receiptListObj.getMessage(), receiptListObj.getMsgStatus()
                });
            }

        }

//
////        List<ReceiptSMS_pojo> receiptSMSPojo = receiptList;
//                    int rowSize = receiptList.size();
//                    int indexNo = 0;
//                    for (int i = 0; i < rowSize; i++) {
//                              ++indexNo;
//
//                              ReceiptSMS_pojo receiptListObj = receiptList.get(i);
//
////        }
////
////        for (ReceiptSMS_pojo receiptListObj : getReceiptList ())
////        {
//
//                              String status = receiptListObj.getMsgStatus();
//                              status = status.trim();
//                              Boolean isSelected = receiptListObj.getIsSelected();
//
//
//                              if (status.equalsIgnoreCase(MessageStatusEnum.PENDING.toString())) {
//                                        dfTblMdPending.addRow(new Object[]{
//                                                  true, indexNo, receiptListObj.getReceiptNo(), receiptListObj.getCusCode(), receiptListObj.getCusName(), receiptListObj.getCusOfficeNo(), receiptListObj.getTelNo(),
//                                                  receiptListObj.getMessage(), receiptListObj.getMsgStatus()
//                                        });
//                              } else if (status.equalsIgnoreCase(MessageStatusEnum.QUEUE.toString())) {
//                                        dfTblMdPending.addRow(new Object[]{
//                                                  true, indexNo, receiptListObj.getReceiptNo(), receiptListObj.getCusCode(), receiptListObj.getCusName(), receiptListObj.getCusOfficeNo(), receiptListObj.getTelNo(),
//                                                  receiptListObj.getMessage(), receiptListObj.getMsgStatus()
//                                        });
//                              }
//
//
////            else if (status.equalsIgnoreCase (MessageStatusEnum.SENT.toString ()))
////            {
////                dfTblMdSent.addRow (new Object[]
////                {
////                    receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getCusOfficeNo (), receiptListObj.getTelNo (),
////                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
////                });
////            } else if (status.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()))
////            {
////                dfTblMdUnsent.addRow (new Object[]
////                {
////                    isSelected, receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getTelNo (),
////                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
////                });
////            } else if (status.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ().trim ()))
////            {
////                dfTblMdUnsent.addRow (new Object[]
////                {
////                    isSelected, receiptListObj.getReceiptNo (), receiptListObj.getCusCode (), receiptListObj.getCusName (), receiptListObj.getCusOfficeNo (), receiptListObj.getTelNo (),
////                    receiptListObj.getMessage (), receiptListObj.getMsgStatus ()
////                });
////            }
//
//
//
//                    }
        tblPending.revalidate();
    }

    private void sendSms() {
        new Thread(new Runnable() {
            @Override
            public void run() {

                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {
//                    ---------------------------------------
                    Company_Profile.setMsgSendStart(true);
//                    ----------------------------------------

                    List<ReceiptSMS_pojo> paymentList2 = new ArrayList<ReceiptSMS_pojo>();

                    DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
                    int rowCount = dfTblMd.getRowCount();
                    for (int i = 0; i < rowCount; i++) {
                        Boolean isSelected2 = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString());
                        String receiptNo = dfTblMd.getValueAt(i, 1).toString();
                        String phoneNo = dfTblMd.getValueAt(i, 5).toString();
                        String message = dfTblMd.getValueAt(i, 6).toString();

                        ReceiptSMS_pojo loanPojo = new ReceiptSMS_pojo();
                        loanPojo.setIsSelected(isSelected2);
                        loanPojo.setReceiptNo(receiptNo);
                        loanPojo.setTelNo(phoneNo);

                        loanPojo.setMessage(message);

                        paymentList2.add(loanPojo);

//                        changeStatusToQueue (phoneNo, message);
                    }

                    if (paymentList2.size() > 0) {
                        new Receipt_service().sendReceiptSms(paymentList2);
                    }

                }
            }
        }).start();
    }






    private void sendSms_2() {

        trdSend = new Thread(new Runnable() {
            @Override
            public void run() {


                String messageType = MyMessageTypeEnum.NEW_RECEIPT.toString().trim();

                int sentSMSCount = 0;
                int sentConfirmSMSCount = 0;


                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {



                    try {
                        //------------------------------------------------------------------------------
                        trdWaiting = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                waitingDialogSMSSend = new WaitingDialogSMSSend("", "Starting ...", ApplicationDesktop.appDesktop, true);
                                waitingDialogSMSSend.setVisible(true);
                            }
                        });
                        trdWaiting.start();
//------------------------------------------------------------------------------



                        if (receipt_service == null) {
                            receipt_service = new Receipt_service();
                        }
                        if (sendMessage == null) {
                            sendMessage = new SendMessage();
                        }

// --------------------------------------------------
                        Company_Profile.setMsgSendStart(true);
// --------------------------------------------------

                        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
                        int rowCount = dfTblMd.getRowCount();

//-------------------------------------
                        MySMSServer.restartService();
//-------------------------------------

                        OutboundMessage.MessageStatuses confirmStart = sendMessage.sendConfirm_1(Company_Profile.getConfirmTeleNo(), messageType + " sending start.");
                        if (!confirmStart.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            MyMessagesUtility.showWarning(confirmStart.toString());
                        } else if (confirmStart.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            ++sentConfirmSMSCount;
                        }

                        outerLoop:
                        for (int i = currentRow; i < rowCount; i++) {

                            if (!Company_Profile.getMsgSendStart()) // IF MSG SENDING STOPED
                            {
                                break outerLoop;
                            }

                            int j = i;
                            ++j;

                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Jurnal_if_view_2.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            //----------------------------------------
                            String customeMessage = "On Processing : " + j + "/" + rowCount;
                            waitingDialogSMSSend.setCustomMessage(customeMessage);

                            tblPending.setRowSelectionInterval(i, i);
                            tblPending.scrollRectToVisible(new Rectangle(tblPending.getCellRect(i, 0, true)));
                            //----------------------------------------

                            Boolean isSelected = Boolean.valueOf(String.valueOf(dfTblMd.getValueAt(i, 0)));
                            if (isSelected) {
                                if (!dfTblMd.getValueAt(i, 8).toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString())) {
                                    String jCode = String.valueOf(dfTblMd.getValueAt(i, 2));
                                    String cusCode = String.valueOf(dfTblMd.getValueAt(i, 3));
                                    String phoneNo = String.valueOf(dfTblMd.getValueAt(i, 6));
                                    String message = String.valueOf(dfTblMd.getValueAt(i, 7));

                                    // SEND
                                    OutboundMessage.MessageStatuses msgStatus = receipt_service.sendSMS_2(phoneNo, message, cusCode, jCode);
                                    if (msgStatus.toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString().trim())) {
                                        ++sentSMSCount;
                                    }
                                    dfTblMd.setValueAt(msgStatus.toString(), i, 8);
                                }

                            }
                            currentRow = i;
                        }


                        waitingDialogSMSSend.dispose();
                        trdWaiting.interrupt();



                        OutboundMessage.MessageStatuses confirmEnd = sendMessage.sendConfirm_1(Company_Profile.getConfirmTeleNo(), messageType + " sending end with " + sentSMSCount + " messages.");
                        if (!confirmEnd.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            MyMessagesUtility.showWarning(confirmEnd.toString());
                        } else if (confirmEnd.toString().trim().equals(MessageStatusEnum.SENT.toString().trim())) {
                            ++sentConfirmSMSCount;
                        }


                        new SMSCount_Service().saveSMSCount(messageType, sentSMSCount);
                        new SMSCount_Service().saveSMSCount(MyMessageTypeEnum.CONFIRM.toString().trim(), sentConfirmSMSCount);

                    } catch (Exception ex) {
                        MyMessagesUtility.showError(ex.toString());
                        Logger.getLogger(ReceiptJIFrame_view_2.class.getName()).log(Level.SEVERE, null, ex);
                    }


                }
            }
        });
        trdSend.start();

    }




    private void tblSelectProcessing() {

//        int rowNo = tblPending.getSelectedRow ();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        int dfTblMdSize = dfTblMd.getRowCount();
        for (int j = 0; j < dfTblMdSize; j++) {
            Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(j, 0).toString().trim());
            String cusCode = dfTblMd.getValueAt(j, 1).toString().trim();
            String tel = dfTblMd.getValueAt(j, 2).toString().trim();
            String msg = dfTblMd.getValueAt(j, 3).toString().trim();

//            List<ReceiptSMS_pojo> loanArearsMap = receiptList;
            for (int i = 0; i < receiptList.size(); i++) {
                ReceiptSMS_pojo loanPojo = receiptList.get(i);

                String listCusCode = loanPojo.getCusCode().trim();
                String listTel = loanPojo.getTelNo().trim();
                String listMsg = loanPojo.getMessage().trim();

                if (listCusCode.equalsIgnoreCase(cusCode) && listTel.equalsIgnoreCase(tel) && listMsg.equalsIgnoreCase(msg)) {
                    receiptList.remove(loanPojo);
                }

                loanPojo.setIsSelected(isSelected);
                receiptList.add(loanPojo);

            }
        }
    }

    private void selectAllProcessing() {
        List<ReceiptSMS_pojo> loanArearsMap = getReceiptList();
        int size = loanArearsMap.size();
        for (int i = 0; i < size; i++) {
            ReceiptSMS_pojo loanPojo = loanArearsMap.get(i);

            loanArearsMap.remove(loanPojo);

            loanPojo.setIsSelected(true);
            loanArearsMap.add(i, loanPojo);

        }

        loadReceiptToTables();
    }

    private void unselectAllProcessing() {
        List<ReceiptSMS_pojo> loanArearsMap = getReceiptList();
        int size = loanArearsMap.size();
        for (int i = 0; i < size; i++) {
            ReceiptSMS_pojo loanPojo = loanArearsMap.get(i);

            loanArearsMap.remove(loanPojo);

            loanPojo.setIsSelected(false);
            loanArearsMap.add(i, loanPojo);

        }

        loadReceiptToTables();
    }

    private void markAsSend() {

        if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

            List<String> list = new ArrayList<String>();

            DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
            int rowCount = dfTblMd.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                Boolean isSelected2 = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString());
                if (isSelected2) {
                    String receiptNo = dfTblMd.getValueAt(i, 2).toString();
                    list.add(receiptNo);
                }

            }

//            List<ReceiptSMS_pojo> receiptList2 = receiptList;
//            for (ReceiptSMS_pojo receiptSMS_pojo : receiptList2)
//            {
//                if (receiptSMS_pojo.getIsSelected ())
//                {
//                    String receiptNO = receiptSMS_pojo.getReceiptNo ();
//                    list.add (receiptNO);
//                    System.out.println ("receiptNO>>" + receiptNO);
//                }
//
//            }
            if (list.size() > 0) {
                new Receipt_service().markAsSend(list);
                loadSendingReceiptToList();
            } else {
                MyMessagesUtility.showWarning("Mark at least one record.");
            }

//            new Jurnal_service ().alterFT_DTAIL ();
        }
    }

//    private void changeStatusToQueue (String teleNoPara, String MessagePara)
//    {
//
//
//        String recipient = teleNoPara;
//        String msgText = MessagePara;
//
//        List<ReceiptSMS_pojo> receiptList = receiptList;
//        if (receiptList != null)
//        {
//            for (int i = 0 ; i < receiptList.size () ; i++)
//            {
//                ReceiptSMS_pojo listObj = receiptList.get (i);
//
//                String telList = listObj.getTelNo ().trim ();
//                String msgList = listObj.getMessage ().trim ();
//
//                if (recipient.equalsIgnoreCase (telList) && msgText.equalsIgnoreCase (msgList))
//                {
//                    receiptList.remove (i);
//                    listObj.setMsgStatus ("QUEUE");
//                    receiptList.add (i, listObj);
//
//                }
//            }
//        }
//
//        loadReceiptToTables ();
//    }
//    private void reSend ()
//    {
//        new Thread (new Runnable ()
//        {
//            @Override
//            public void run ()
//            {
//                if (MyMessagesUtility.showConfirmDoYouWantToRemove ("Confirm ?") == 0)
//                {
//
//                    //                    --------------------------------------
//                    Company_Profile.setMsgSendStart (true);
////                    --------------------------------------
//
//
//                    List<ReceiptSMS_pojo> paymentList2 = new ArrayList<ReceiptSMS_pojo> ();
//
//                    DefaultTableModel dfTblMd = (DefaultTableModel) tblUnsent.getModel ();
//                    int rowCount = dfTblMd.getRowCount ();
//                    for (int i = 0 ; i < rowCount ; i++)
//                    {
//                        Boolean isSelected2 = Boolean.valueOf (dfTblMd.getValueAt (i, 0).toString ());
//                        String receiptNo = dfTblMd.getValueAt (i, 1).toString ();
//                        String phoneNo = dfTblMd.getValueAt (i, 5).toString ();
//                        String message = dfTblMd.getValueAt (i, 6).toString ();
//                        String msgStatus = dfTblMd.getValueAt (i, 7).toString ().trim ();
//
//                        if (isSelected2 && (msgStatus.equalsIgnoreCase (MessageStatusEnum.UNSENT.toString ()) || msgStatus.equalsIgnoreCase (MessageStatusEnum.FAILED.toString ())))
//                        {
//                            ReceiptSMS_pojo loanPojo = new ReceiptSMS_pojo ();
//                            loanPojo.setIsSelected (isSelected2);
//                            loanPojo.setReceiptNo (receiptNo);
//                            loanPojo.setTelNo (phoneNo);
//
//                            loanPojo.setMessage (message);
//
//                            paymentList2.add (loanPojo);
//                        }
//
//                    }
//
//                    if (paymentList2.size () > 0)
//                    {
//                        new Receipt_service ().reSendReceiptSms (paymentList2);
//                    }
//                }
//            }
//        }).start ();
//    }
//    private void tblUnsentSelectionProsesing ()
//    {
//
//        DefaultTableModel dfTblMd = (DefaultTableModel) tblUnsent.getModel ();
//        int rowCount = dfTblMd.getRowCount ();
//        for (int j = 0 ; j < rowCount ; j++)
//        {
//            Boolean isSelectedBoo = Boolean.getBoolean (dfTblMd.getValueAt (j, 0).toString ().trim ());
//            String ac = dfTblMd.getValueAt (j, 1).toString ().trim ();
//            String cusCode = dfTblMd.getValueAt (j, 2).toString ().trim ();
//
//
////List<ReceiptSMS_pojo> receiptList;
//
//            List<ReceiptSMS_pojo> loanArearsMap = receiptList;
//            for (int i = 0 ; i < loanArearsMap.size () ; i++)
//            {
//                ReceiptSMS_pojo loanPojo = loanArearsMap.get (i);
//
//                String listCusCode = loanPojo.getCusCode ().trim ();
//                String listAC = loanPojo.getReceiptNo ().trim ();
//
//                if (listCusCode.equalsIgnoreCase (cusCode) && listAC.equalsIgnoreCase (ac))
//                {
//                    loanArearsMap.remove (loanPojo);
//                }
//                if (isSelectedBoo == true)
//                {
//                    loanPojo.setIsSelected (false);
//                }
//                if (isSelectedBoo == false)
//                {
//                    loanPojo.setIsSelected (false);
//                }
//
//                loanArearsMap.add (loanPojo);
//
//            }
//        }
//    }
    private void tblSentSelectionProsesing() {

        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        int rowCount = dfTblMd.getRowCount();
        for (int j = 0; j < rowCount; j++) {
            Boolean isSelectedBoo = Boolean.getBoolean(dfTblMd.getValueAt(j, 0).toString().trim());
            String ac = dfTblMd.getValueAt(j, 1).toString().trim();
            String cusCode = dfTblMd.getValueAt(j, 2).toString().trim();

            List<ReceiptSMS_pojo> loanArearsMap = receiptList;
            for (int i = 0; i < loanArearsMap.size(); i++) {
                ReceiptSMS_pojo loanPojo = loanArearsMap.get(i);

                String listCusCode = loanPojo.getCusCode().trim();
                String listAC = loanPojo.getReceiptNo().trim();

                if (listCusCode.equalsIgnoreCase(cusCode) && listAC.equalsIgnoreCase(ac)) {
                    loanArearsMap.remove(loanPojo);
                }
                if (isSelectedBoo == true) {
                    loanPojo.setIsSelected(false);
                }
                if (isSelectedBoo == false) {
                    loanPojo.setIsSelected(false);
                }

                loanArearsMap.add(loanPojo);

            }
        }
    }

    private void close() {
        dispose();
    }

    private void stopSending() {
        if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?.") == 0) {
            Company_Profile.setMsgSendStart(false);
        }
    }

    private void showMessageInf() {

        int selectedRow = tblPending.getSelectedRow();
        String phnNo = tblPending.getValueAt(selectedRow, 6).toString().trim();
        String msg = tblPending.getValueAt(selectedRow, 7).toString().trim();
        String msgStutas = tblPending.getValueAt(selectedRow, 8).toString().trim();

        showMessageDetails_INF.showMessage(phnNo,msg,msgStutas);
        

    }

    public void closeMessageInf() {
        if (showMessageDetails_INF != null) {
            showMessageDetails_INF.dispose();
        }
    }

   

}

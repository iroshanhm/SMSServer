/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iroshan.com.smsserver.view;

import iroshan.com.common.DateAndTime;
import iroshan.com.common.utility.MyDateAndTimeUtil;
import iroshan.com.common.utility.MyMessagesUtility;
import iroshan.com.common.utility.MyRounding;
import iroshan.com.smsserver.enums.MessageStatusEnum;
import iroshan.Company_Profile;
import iroshan.com.smsserver.pojo.MessageToMemeberSearch_pojo;
import iroshan.com.smsserver.pojo.NewJurnal_pojo;
import iroshan.com.smsserver.service.Cluster_service;
import iroshan.com.smsserver.service.Jurnal_service;
import iroshan.com.smsserver.service.Loan_service;
import iroshan.com.smsserver.service.MessageToMemebers_service;
import iroshan.com.smsserver.service.MySMSServer;
import static iroshan.com.smsserver.view.Jurnal_if_view_2.tableMap;
import java.awt.Rectangle;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.smslib.OutboundMessage;

/**
 *
 * @author Iroshan
 */
public class MessageToMemebers_view extends javax.swing.JInternalFrame {

    private static MessageToMemebers_view messageToMemebers_view;
    static Map<Integer, MessageToMemeberSearch_pojo> tableMap;

    Thread trdSend = null;
    MessageToMemebers_service messageToMemebers_service = null;

    int currentRow = 0;
    int findCurrentRow = 0;
    int preveiesEvent = -1; // 1= down 2=up

    //  WAITING DIALOG - START ***************************************
    WaitingDialogSMSSend waitingDialogSMSSend;
    Thread trdWaiting;
    // WAITING DIALOG - END ******************************************

    public static MessageToMemebers_view getMessageToMemebers_view() {
        return messageToMemebers_view;
    }

    public static void setMessageToMemebers_view(MessageToMemebers_view aMessageToMemebers_view) {
        messageToMemebers_view = aMessageToMemebers_view;
    }

    /**
     * Creates new form MessageToMemebers
     */
    public MessageToMemebers_view() {
        initComponents();
        messageToMemebers_view = this;
        loadCenter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfMessage = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbCenter = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfTele = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfSubAcOfficeNo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbSortBy = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        dfBirthday = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        tf_code_prefix = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPending = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblSent = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblUnsent = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Message To Memeber");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iroshan/com/smsserver/img/Messaging.png"))); // NOI18N

        jLabel5.setText("Message :");

        tfMessage.setColumns(20);
        tfMessage.setRows(5);
        jScrollPane1.setViewportView(tfMessage);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setText("Center :");

        cmbCenter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel2.setText("Name :");

        jLabel3.setText("Tele. :");

        jLabel4.setText("Sub A/C Office Code :");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Celar");

        jLabel6.setText("Sort by :");

        cmbSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DEFAULT", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", " " }));

        jLabel7.setText("Day for Birthday :");

        dfBirthday.setDateFormatString("yyyy-MM-dd");

        jLabel8.setText("Code Prefix :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dfBirthday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSortBy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2))
                                    .addComponent(tfSubAcOfficeNo)
                                    .addComponent(tfTele)
                                    .addComponent(tfName)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(47, 47, 47)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tf_code_prefix)
                                    .addComponent(cmbCenter, 0, 163, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_code_prefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfTele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfSubAcOfficeNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(dfBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("SEND");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Select All");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton8.setText("Unselect All");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        tblPending.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPending.setFillsViewportHeight(true);
        tblPending.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblPending);

        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setText("STOP SENDING");

        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton9.setText("CLOSE");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jTabbedPane1.addTab("PENDING", jPanel4);

        tblSent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSent.setFillsViewportHeight(true);
        tblSent.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tblSent);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("SENT", jPanel5);

        tblUnsent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUnsent.setFillsViewportHeight(true);
        tblUnsent.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tblUnsent);

        jButton5.setText("Resend");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jTabbedPane1.addTab("UNSENT", jPanel6);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        search();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
    {//GEN-HEADEREND:event_jButton3ActionPerformed

        sendSms_2();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed
        selectAllProcessing();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed
    {//GEN-HEADEREND:event_jButton8ActionPerformed
        unselectAllProcessing();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton5ActionPerformed
    {//GEN-HEADEREND:event_jButton5ActionPerformed
        reSendSms();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton9ActionPerformed
    {//GEN-HEADEREND:event_jButton9ActionPerformed
        close();
    }//GEN-LAST:event_jButton9ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbCenter;
    private javax.swing.JComboBox<String> cmbSortBy;
    private com.toedter.calendar.JDateChooser dfBirthday;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblPending;
    private javax.swing.JTable tblSent;
    private javax.swing.JTable tblUnsent;
    private javax.swing.JTextArea tfMessage;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSubAcOfficeNo;
    private javax.swing.JTextField tfTele;
    private javax.swing.JTextField tf_code_prefix;
    // End of variables declaration//GEN-END:variables

    private void loadCenter() {
        cmbCenter.removeAllItems();
        cmbCenter.addItem("Select");
        cmbCenter.addItem("ALL");

        List<String> list = new Cluster_service().getClusterAsString();
        for (String listObj : list) {
            cmbCenter.addItem(listObj);
        }
    }

    private void search() {
        Boolean aFlag = true;

        String center = null;
        String name;
        String tele;
        String subACOfficeNo;
        Date birthday;
        String sortBy;

        String code_prefix;
        code_prefix = tf_code_prefix.getText().trim();
        if (code_prefix.isEmpty()) {
            code_prefix = "";
        } else {
            code_prefix = code_prefix.trim();
        }

        if (cmbCenter.getSelectedIndex() == 0) {
            aFlag = false;
            MyMessagesUtility.showWarning("Select the center.");
        } else {
            center = cmbCenter.getSelectedItem().toString().trim();
            String centerArr[] = center.split("-");
            center = centerArr[0].trim();
        }

        name = tfName.getText().trim();
        if (name.isEmpty()) {
            name = "ALL";
        }

        tele = tfTele.getText().trim();
        if (tele.isEmpty()) {
            tele = "ALL";
        }

        subACOfficeNo = tfSubAcOfficeNo.getText().trim();
        if (subACOfficeNo.isEmpty()) {
            subACOfficeNo = "ALL";
        }

        birthday = dfBirthday.getDate();
        if (birthday == null) {
            birthday = null;
        }

        if (cmbSortBy.getSelectedIndex() == 0) {
            sortBy = "ALL";
        } else {
            sortBy = cmbSortBy.getSelectedItem().toString().trim();
        }

        if (aFlag) {
            tableMap = new MessageToMemebers_service().search(center, name, tele, subACOfficeNo, birthday, sortBy, code_prefix);
            loadTables();
        }

    }

    private void selectAllProcessing() {
        int rowNo = tblPending.getSelectedRow();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        int rowCount = dfTblMd.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString().trim());
            Integer keyNo = Integer.valueOf(dfTblMd.getValueAt(i, 1).toString().trim());
//            String tel = dfTblMd.getValueAt (i, 2).toString ().trim ();
//            String msg = dfTblMd.getValueAt (i, 3).toString ().trim ();

            MessageToMemeberSearch_pojo messageToMemeberSearch_pojo = tableMap.get(keyNo);
            messageToMemeberSearch_pojo.setIsSelect(true);
            tableMap.remove(keyNo);
            tableMap.put(keyNo, messageToMemeberSearch_pojo);
        }

        loadTables();
    }

    private void unselectAllProcessing() {

//        int rowNo = tblPending.getSelectedRow ();
        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
        int rowCount = dfTblMd.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Boolean isSelected = Boolean.valueOf(dfTblMd.getValueAt(i, 0).toString().trim());
            Integer keyNo = Integer.valueOf(dfTblMd.getValueAt(i, 1).toString().trim());
//            String tel = dfTblMd.getValueAt (i, 2).toString ().trim ();
//            String msg = dfTblMd.getValueAt (i, 3).toString ().trim ();

            MessageToMemeberSearch_pojo messageToMemeberSearch_pojo = tableMap.get(keyNo);
            messageToMemeberSearch_pojo.setIsSelect(false);
            tableMap.remove(keyNo);
            tableMap.put(keyNo, messageToMemeberSearch_pojo);
        }

        loadTables();
    }

    public void loadTables() {

//        PENDING
        final DefaultTableModel dfTblMdPending = (DefaultTableModel) tblPending.getModel();
        int rowCountPending = dfTblMdPending.getRowCount();
        for (int i = 0; i < rowCountPending; i++) {
            dfTblMdPending.removeRow(0);
        }
//        dfTblMdPending.setRowCount (0);

//        SENT
        final DefaultTableModel dfTblMdSent = (DefaultTableModel) tblSent.getModel();
        int rowCountSent = dfTblMdSent.getRowCount();

        for (int j = 0; j < rowCountSent; j++) {
            dfTblMdSent.removeRow(0);
        }
//dfTblMdSent.setRowCount (0);

//        UNSENT
        final DefaultTableModel dfTblMdUnsent = (DefaultTableModel) tblUnsent.getModel();
        int rowCountUnsent = dfTblMdUnsent.getRowCount();

        for (int k = 0; k < rowCountUnsent; k++) {
            dfTblMdUnsent.removeRow(0);
        }
//        dfTblMdUnsent.setRowCount (0);

        for (Map.Entry<Integer, MessageToMemeberSearch_pojo> entrySet : tableMap.entrySet()) {
            Integer keyNo = entrySet.getKey();
            MessageToMemeberSearch_pojo value = entrySet.getValue();

            Boolean isSelect = value.getIsSelect();

            String code = value.getCode();
            String name = value.getName();
            String acOfficeNo = value.getSubACOfficeNo();
            String memTeleNo = value.getTele();
            Date birthDayDate = value.getBirthday();
            String birthDayString = MyDateAndTimeUtil.getFormatedDateAsString(birthDayDate);
//            String message = value.getMessage ();
            String status = value.getStatus();

            if (status.equalsIgnoreCase(MessageStatusEnum.PENDING.toString())) {

                dfTblMdPending.addRow(new Object[]{
                    //"SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
                    isSelect, keyNo, code, name, acOfficeNo, memTeleNo, birthDayString, status
                });
            } else if (status.equalsIgnoreCase(MessageStatusEnum.QUEUE.toString())) {
                dfTblMdPending.addRow(new Object[]{
                    //"SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
                    isSelect, keyNo, code, name, acOfficeNo, memTeleNo, birthDayString, status
                });
            } else if (status.equalsIgnoreCase(MessageStatusEnum.SENT.toString())) {

                dfTblMdSent.addRow(new Object[]{
                    //"SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
                    isSelect, keyNo, code, name, acOfficeNo, memTeleNo, birthDayString, status
                });
            } else if (status.equalsIgnoreCase(MessageStatusEnum.UNSENT.toString())) {

                dfTblMdUnsent.addRow(new Object[]{
                    //"SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
                    isSelect, keyNo, code, name, acOfficeNo, memTeleNo, birthDayString, status
                });
            } else if (status.equalsIgnoreCase(MessageStatusEnum.FAILED.toString().trim())) {

                dfTblMdUnsent.addRow(new Object[]{
                    //"SELECT", "#", "CODE", "NAME", "SUB A/C OFFICE NO", "TELE.", "BIRTHDAY", "STATUS"
                    isSelect, keyNo, code, name, acOfficeNo, memTeleNo, birthDayString, status
                });
            }

        }

    }

// ***** sendSms - UNUSE ******************
    private void sendSms() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

//                    --------------------------------------
                    Company_Profile.setMsgSendStart(true);
//                    --------------------------------------

                    String message = tfMessage.getText().trim();
                    if (message.isEmpty()) {
                        MyMessagesUtility.showWarning("Message is empty.");
                    } else {
                        Map<Integer, MessageToMemeberSearch_pojo> map = tableMap;
//                    Map<Integer, NewJurnal_pojo> tableMap2 = tableMap;
                        new MessageToMemebers_service().sendSms(map, message);
                    }
                }
            }
        }).start();
    }

    private void sendSms_2() {

        trdSend = new Thread(new Runnable() {
            @Override
            public void run() {

                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {
                    try {
                        //-------------------------------------------------------        
                        trdWaiting = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                waitingDialogSMSSend = new WaitingDialogSMSSend("", "Starting ...", ApplicationDesktop.appDesktop, true);
                                waitingDialogSMSSend.setVisible(true);
                            }
                        });
                        trdWaiting.start();
                        //-------------------------------------------------------

                        if (messageToMemebers_service == null) {
                            messageToMemebers_service = new MessageToMemebers_service();
                        }

                        // --------------------------------------------------
                        Company_Profile.setMsgSendStart(true);
                        // --------------------------------------------------

                        DefaultTableModel dfTblMd = (DefaultTableModel) tblPending.getModel();
                        int rowCount = dfTblMd.getRowCount();

                        //-------------------------------------
                        MySMSServer.restartService();
                        //-------------------------------------

                        String msg = tfMessage.getText().trim();
                        if (!msg.isEmpty()) {
                            outerLoop:
                            for (int i = currentRow; i < rowCount; i++) {

                                if (!Company_Profile.getMsgSendStart()) // IF MSG SENDING STOPED
                                {
                                    break outerLoop;
                                }

                                int j = i;
                                ++j;

                                try {
                                    Thread.sleep(500);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(Jurnal_if_view_2.class.getName()).log(Level.SEVERE, null, ex);
                                }

                                //----------------------------------------
                                String customeMessage = "On Processing : " + j + "/" + rowCount;
                                waitingDialogSMSSend.setCustomMessage(customeMessage);

                                tblPending.setRowSelectionInterval(i, i);
                                tblPending.scrollRectToVisible(new Rectangle(tblPending.getCellRect(i, 0, true)));
                                //----------------------------------------

                                Boolean isSelected = Boolean.valueOf(String.valueOf(dfTblMd.getValueAt(i, 0)));
                                if (isSelected) {
                                    if (!dfTblMd.getValueAt(i, 7).toString().trim().equalsIgnoreCase(OutboundMessage.MessageStatuses.SENT.toString())) {

                                        //                                String voucherNo = String.valueOf (dfTblMd.getValueAt (i, 2));
//                                String cusCode = String.valueOf (dfTblMd.getValueAt (i, 3));
                                        String phoneNo = String.valueOf(dfTblMd.getValueAt(i, 5));
                                        String message = msg;

// SEND
                                        OutboundMessage.MessageStatuses msgStatus = messageToMemebers_service.sendSMS_2(phoneNo, message);

                                        dfTblMd.setValueAt(msgStatus.toString(), i, 7);

                                    }

                                }
                                currentRow = i;
                            }
                        }
                    } catch (Exception ex) {
                        MyMessagesUtility.showError(ex.toString());
                        Logger.getLogger(MessageToMemebers_view.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    waitingDialogSMSSend.dispose();
                    trdWaiting.interrupt();
                }
            }
        });
        trdSend.start();

    }

    private void reSendSms() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (MyMessagesUtility.showConfirmDoYouWantToRemove("Confirm ?") == 0) {

//                    --------------------------------------
                    Company_Profile.setMsgSendStart(true);
//                    --------------------------------------

                    String message = tfMessage.getText().trim();
                    if (message.isEmpty()) {
                        MyMessagesUtility.showWarning("Message is empty.");
                    } else {
                        Map<Integer, MessageToMemeberSearch_pojo> map = tableMap;
//                    Map<Integer, NewJurnal_pojo> tableMap2 = tableMap;
                        new MessageToMemebers_service().reSendSms(map, message);
                    }
                }
            }
        }).start();
    }

    public void loadTablesByMapKey(Integer keyPara, String messageStatusStringPara) {

        Integer key = keyPara;
        String messageStatusString = messageStatusStringPara.trim();

        MessageToMemeberSearch_pojo value = tableMap.get(key);

        value.setStatus(messageStatusString);
        tableMap.remove(key);
        tableMap.put(key, value);

        loadTables();

    }

    private void close() {
        dispose();
    }

}
